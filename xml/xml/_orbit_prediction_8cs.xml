<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="_orbit_prediction_8cs" kind="file">
    <compoundname>OrbitPrediction.cs</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>second<sp/>attempt...</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>let&apos;s<sp/>try<sp/>iterating<sp/>forward<sp/>in<sp/>time<sp/>to<sp/>plot<sp/>an<sp/>orbit<sp/>using<sp/>point<sp/>samples</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>It<sp/>Works!!<sp/>:D</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>next,<sp/>instead<sp/>of<sp/>plotting<sp/>into<sp/>a<sp/>crappy<sp/>texture,<sp/>let&apos;s<sp/>plot<sp/>a<sp/>3D<sp/>scene.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>later<sp/>on,<sp/>we<sp/>should<sp/>be<sp/>able<sp/>to<sp/>rotate<sp/>this<sp/>scene<sp/>to<sp/>view<sp/>it<sp/>from<sp/>any<sp/>angle</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>how<sp/>&apos;bout<sp/>that<sp/>for<sp/>a<sp/>mini<sp/>map?<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>improvements<sp/>for<sp/>extra<sp/>accuracy:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>take<sp/>position<sp/>from<sp/>ship<sp/>center<sp/>of<sp/>mass,<sp/>instead<sp/>of<sp/>capsule<sp/>transform</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>not<sp/>as<sp/>easy<sp/>as<sp/>it<sp/>seems,<sp/>since<sp/>the<sp/>ship<sp/>is<sp/>just<sp/>a<sp/>bunch<sp/>of<sp/>parts...</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>we<sp/>need<sp/>a<sp/>ShipInfo<sp/>class...<sp/>(or<sp/>just<sp/>put<sp/>it<sp/>into<sp/>FlightState)</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>improvements<sp/>for<sp/>performance</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>-<sp/>it<sp/>would<sp/>be<sp/>neat<sp/>if<sp/>this<sp/>whole<sp/>procedure<sp/>were<sp/>in<sp/>a<sp/>coroutine..</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>we<sp/>iterate<sp/>ahead<sp/>until<sp/>we<sp/>hit<sp/>the<sp/>max<sp/>time<sp/>allowance,<sp/>then<sp/>we<sp/>yields<sp/>until<sp/>next<sp/>frame</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>or<sp/>maybe<sp/>we<sp/>allow<sp/>for<sp/>custom<sp/>(or<sp/>dynamic)<sp/>refreshing<sp/>of<sp/>this<sp/>thing</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment">public<sp/>class<sp/>OrbitPrediction<sp/>:<sp/>MonoBehaviour</highlight></codeline>
<codeline lineno="24"><highlight class="comment">{</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>maxSamples<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>sampleDt<sp/>=<sp/>2f;<sp/>///&lt;<sp/>each<sp/>sample<sp/>is<sp/>this<sp/>many<sp/>seconds<sp/>(or<sp/>frames,<sp/>not<sp/>sure)<sp/>apart<sp/>from<sp/>the<sp/>others<sp/>(I<sp/>think<sp/>it&apos;s<sp/>seconds)</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>Transform<sp/>planet;</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>Vector3[]<sp/>points;</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>Texture2D<sp/>plotMap;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>Start()</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planet<sp/>=<sp/>GameObject.Find(&quot;planet&quot;).transform;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>new<sp/>Vector3[maxSamples];</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plotMap<sp/>=<sp/>new<sp/>Texture2D(200,<sp/>200);</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//GameEvents.onFlightUpd.Add(updateOrbitalTrajectory);</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>updateOrbitalTrajectory()</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>pos<sp/>=<sp/>FlightGlobals.ship_position;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>vel<sp/>=<sp/>FlightGlobals.ship_velocity;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>currPos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>currVel<sp/>=<sp/>vel;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>sampleCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>maxSamples;<sp/>i++)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>gravity<sp/>=<sp/>FlightGlobals.getGeeForceAtPosition(currPos);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>nextVel<sp/>=<sp/>currVel<sp/>+<sp/>(gravity<sp/>*<sp/>sampleDt);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>nextPos<sp/>=<sp/>currPos<sp/>+<sp/>(nextVel<sp/>*<sp/>sampleDt);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[i]<sp/>=<sp/>currPos;</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currPos<sp/>=<sp/>nextPos;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currVel<sp/>=<sp/>nextVel;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleCount++;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>Vector3.Distance(points[i],<sp/>points[0])<sp/>&lt;<sp/>Vector3.Distance(points[i],<sp/>points[i<sp/>-<sp/>1])<sp/>||</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3.Distance(points[i],<sp/>Vector3.down<sp/>*<sp/>10000f)<sp/>&lt;<sp/>9000f)<sp/>break;<sp/>//this<sp/>means<sp/>we<sp/>went<sp/>around<sp/>or<sp/>underground</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>px<sp/>=<sp/>0;<sp/>px<sp/>&lt;<sp/>plotMap.width;<sp/>px++)</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>py<sp/>=<sp/>0;<sp/>py<sp/>&lt;<sp/>plotMap.height;<sp/>py++)</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plotMap.SetPixel(px,<sp/>py,<sp/>Color.black);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plotMap.SetPixel((int)((GameObject.Find(&quot;PlatformPlane&quot;).transform.position.x<sp/>/<sp/>30000f<sp/>+<sp/>0.5f)<sp/>*<sp/>200f),<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)(((GameObject.Find(&quot;PlatformPlane&quot;).transform.position.x<sp/>+<sp/>10000)<sp/>/<sp/>30000f<sp/>+<sp/>0.5f)<sp/>*<sp/>200f),<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color.blue);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sampleCount;<sp/>i++)</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>(int)((points[i].x<sp/>/<sp/>30000f<sp/>+<sp/>0.5f)<sp/>*<sp/>200f);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>y<sp/>=<sp/>(int)(((points[i].y<sp/>+<sp/>10000)<sp/>/<sp/>30000f<sp/>+<sp/>0.5f)<sp/>*<sp/>200f);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>belowSurface<sp/>=<sp/>Mathf.Sqrt(points[i].x<sp/>*<sp/>points[i].x<sp/>+<sp/>(points[i].y<sp/>+<sp/>10000)<sp/>*<sp/>(points[i].y<sp/>+<sp/>10000))<sp/>&lt;<sp/>10000f;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plotMap.SetPixel(x,<sp/>y,<sp/>belowSurface<sp/>?<sp/>Color.red<sp/>:<sp/>Color.green);</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plotMap.Apply();</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>OnGUI()</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!HighLogic.LoadedSceneIsFlight)<sp/>return;</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GUI.DrawTexture(new<sp/>Rect(10f,<sp/>10f,<sp/>200f,<sp/>200f),<sp/>plotMap);</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">*/</highlight></codeline>
    </programlisting>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/placeholders/OrbitPrediction.cs"/>
  </compounddef>
</doxygen>
