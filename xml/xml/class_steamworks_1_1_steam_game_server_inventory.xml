<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_steamworks_1_1_steam_game_server_inventory" kind="class" prot="public">
    <compoundname>Steamworks::SteamGameServerInventory</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a171d03f2a00085b14805619d6033f0cf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.AddPromoItem</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)</argsstring>
        <name>AddPromoItem</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref></type>
          <declname>itemDef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1a171d03f2a00085b14805619d6033f0cf" kindref="member">AddPromoItem()</ref> / <ref refid="class_steamworks_1_1_steam_game_server_inventory_1a42c2bd7de8925f7e15ce3b01dd05edae" kindref="member">AddPromoItems()</ref> are restricted versions of <ref refid="class_steamworks_1_1_steam_game_server_inventory_1a64ef049f67854aa6a7f33592ca8b4b4f" kindref="member">GrantPromoItems()</ref>. Instead of</para><para>scanning for all eligible promotional items, the check is restricted to a single item</para><para>definition or set of item definitions. This can be useful if your game has custom UI for</para><para>showing a specific promo item to the user.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="193" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a42c2bd7de8925f7e15ce3b01dd05edae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.AddPromoItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)</argsstring>
        <name>AddPromoItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref>[]</type>
          <declname>pArrayItemDefs</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unArrayLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="198" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a132932a69b9df17a6b14cb914f6fb4e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.CheckResultSteamID</definition>
        <argsstring>(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)</argsstring>
        <name>CheckResultSteamID</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDExpected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the result belongs to the target steam ID, false if the</para><para>result does not. This is important when using DeserializeResult, to verify</para><para>that a remote player is not pretending to have a different user&apos;s inventory.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="79" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a594aceb19c2e9d0da059b5ffd3189265" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.ConsumeItem</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)</argsstring>
        <name>ConsumeItem</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref></type>
          <declname>itemConsume</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unQuantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1a594aceb19c2e9d0da059b5ffd3189265" kindref="member">ConsumeItem()</ref> removes items from the inventory, permanently. They cannot be recovered.</para><para>Not for the faint of heart - if your game implements item removal at all, a high-friction</para><para>UI confirmation process is highly recommended.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="208" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ae54a6dd48330093c34c91a64c7d65c8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.DeserializeResult</definition>
        <argsstring>(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE=false)</argsstring>
        <name>DeserializeResult</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pOutResultHandle</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unBufferSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bRESERVED_MUST_BE_FALSE</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserializes a result set and verifies the signature bytes. Returns false</para><para>if bRequireFullOnlineVerify is set but Steam is running in Offline mode.</para><para>Otherwise returns true and then delivers error codes via GetResultStatus.</para><para>The bRESERVED_MUST_BE_FALSE flag is reserved for future use and should not</para><para>be set to true by your game at this time.</para><para>DeserializeResult has a potential soft-failure mode where the handle status</para><para>is set to k_EResultExpired. <ref refid="class_steamworks_1_1_steam_game_server_inventory_1ad40719d808c3e5e268f1184bd660577c" kindref="member">GetResultItems()</ref> still succeeds in this mode.</para><para>The &quot;expired&quot; result could indicate that the data may be out of date - not</para><para>just due to timed expiration (one hour), but also because one of the items</para><para>in the result set may have been traded or consumed since the result set was</para><para>generated. You could compare the timestamp from <ref refid="class_steamworks_1_1_steam_game_server_inventory_1ac2949fc2d56799e662fbd9156ff03cdc" kindref="member">GetResultTimestamp()</ref> to</para><para>ISteamUtils::GetServerRealTime() to determine how old the data is. You could</para><para>simply ignore the &quot;expired&quot; result code and continue as normal, or you</para><para>could challenge the player with expired data to send an updated result set.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="157" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1aafe97957953c3e36e157867f1819c826" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamGameServerInventory.DestroyResult</definition>
        <argsstring>(SteamInventoryResult_t resultHandle)</argsstring>
        <name>DestroyResult</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a result handle and frees all associated memory.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="87" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ab4c29990d3fa7f24b73443b4cd672aa6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.ExchangeItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)</argsstring>
        <name>ExchangeItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref>[]</type>
          <declname>pArrayGenerate</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>punArrayGenerateQuantity</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unArrayGenerateLength</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref>[]</type>
          <declname>pArrayDestroy</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>punArrayDestroyQuantity</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unArrayDestroyLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1ab4c29990d3fa7f24b73443b4cd672aa6" kindref="member">ExchangeItems()</ref> is an atomic combination of item generation and consumption.</para><para>It can be used to implement crafting recipes or transmutations, or items which unpack</para><para>themselves into other items (e.g., a chest).</para><para>Exchange recipes are defined in the ItemDef, and explicitly list the required item</para><para>types and resulting generated type.</para><para>Exchange recipes are evaluated atomically by the Inventory Service; if the supplied</para><para>components do not match the recipe, or do not contain sufficient quantity, the</para><para>exchange will fail.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="223" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1afebd68a00fe79b862f35639e3f514044" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GenerateItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)</argsstring>
        <name>GenerateItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref>[]</type>
          <declname>pArrayItemDefs</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>punArrayQuantity</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unArrayLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>INVENTORY ASYNC MODIFICATION</para><para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1afebd68a00fe79b862f35639e3f514044" kindref="member">GenerateItems()</ref> creates one or more items and then generates a SteamInventoryCallback_t</para><para>notification with a matching nCallbackContext parameter. This API is only intended</para><para>for prototyping - it is only usable by Steam accounts that belong to the publisher group</para><para>for your game.</para><para>If punArrayQuantity is not NULL, it should be the same length as pArrayItems and should</para><para>describe the quantity of each item to generate.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="171" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a98024c9df1cdbee8918c3e0703f0e23a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetAllItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle)</argsstring>
        <name>GetAllItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>INVENTORY ASYNC QUERY</para><para>Captures the entire state of the current user&apos;s Steam inventory.</para><para>You must call DestroyResult on this handle when you are done with it.</para><para>Returns false and sets *pResultHandle to zero if inventory is unavailable.</para><para>Note: calls to this function are subject to rate limits and may return</para><para>cached results if called too frequently. It is suggested that you call</para><para>this function only when you are about to display the user&apos;s full inventory,</para><para>or if you expect that the inventory may have changed.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="102" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a839b6b75fef587c363fbaf19b5f2c628" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetEligiblePromoItemDefinitionIDs</definition>
        <argsstring>(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)</argsstring>
        <name>GetEligiblePromoItemDefinitionIDs</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamID</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref>[]</type>
          <declname>pItemDefIDs</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>punItemDefIDsArraySize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>After handling a <ref refid="struct_steamworks_1_1_steam_inventory_eligible_promo_item_def_i_ds__t" kindref="compound">SteamInventoryEligiblePromoItemDefIDs_t</ref> call result, use this</para><para>function to pull out the list of item definition ids that the user can be</para><para>manually granted via the <ref refid="class_steamworks_1_1_steam_game_server_inventory_1a42c2bd7de8925f7e15ce3b01dd05edae" kindref="member">AddPromoItems()</ref> call.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="348" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a63f6c33fe243f66a0870442328004389" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetItemDefinitionIDs</definition>
        <argsstring>(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)</argsstring>
        <name>GetItemDefinitionIDs</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref>[]</type>
          <declname>pItemDefIDs</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>punItemDefIDsArraySize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GetItemDefinitionIDs returns the set of all defined item definition IDs (which are</para><para>defined via <ref refid="namespace_steamworks" kindref="compound">Steamworks</ref> configuration, and not necessarily contiguous integers).</para><para>If pItemDefIDs is null, the call will return true and *punItemDefIDsArraySize will</para><para>contain the total size necessary for a subsequent call. Otherwise, the call will</para><para>return false if and only if there is not enough space in the output array.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="306" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ab5b6e6301cfcec350daa78e71950eb54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetItemDefinitionProperty</definition>
        <argsstring>(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)</argsstring>
        <name>GetItemDefinitionProperty</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref></type>
          <declname>iDefinition</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchPropertyName</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>pchValueBuffer</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>punValueBufferSizeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GetItemDefinitionProperty returns a string property from a given item definition.</para><para>Note that some properties (for example, &quot;name&quot;) may be localized and will depend</para><para>on the current Steam language settings (see ISteamApps::GetCurrentGameLanguage).</para><para>Property names are always composed of ASCII letters, numbers, and/or underscores.</para><para>Pass a NULL pointer for pchPropertyName to get a comma - separated list of available</para><para>property names. If pchValueBuffer is NULL, *punValueBufferSize will contain the</para><para>suggested buffer size. Otherwise it will be the number of bytes actually copied</para><para>to pchValueBuffer. If the results do not fit in the given buffer, partial</para><para>results may be copied.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="322" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="322" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ab4e75e3e81dc21653e42785a3f787f78" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetItemsByID</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)</argsstring>
        <name>GetItemsByID</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref>[]</type>
          <declname>pInstanceIDs</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unCountInstanceIDs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Captures the state of a subset of the current user&apos;s Steam inventory,</para><para>identified by an array of item instance IDs. The results from this call</para><para>can be serialized and passed to other players to &quot;prove&quot; that the current</para><para>user owns specific items, without exposing the user&apos;s entire inventory.</para><para>For example, you could call GetItemsByID with the IDs of the user&apos;s</para><para>currently equipped cosmetic items and serialize this to a buffer, and</para><para>then transmit this buffer to other players upon joining a game.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="116" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a8005d25ff8a9d751a54fe3940da33641" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetResultItemProperty</definition>
        <argsstring>(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)</argsstring>
        <name>GetResultItemProperty</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unItemIndex</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchPropertyName</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>pchValueBuffer</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>punValueBufferSizeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In combination with GetResultItems, you can use GetResultItemProperty to retrieve</para><para>dynamic string properties for a given item returned in the result set.</para><para>Property names are always composed of ASCII letters, numbers, and/or underscores.</para><para>Pass a NULL pointer for pchPropertyName to get a comma - separated list of available</para><para>property names.</para><para>If pchValueBuffer is NULL, *punValueBufferSize will contain the</para><para>suggested buffer size. Otherwise it will be the number of bytes actually copied</para><para>to pchValueBuffer. If the results do not fit in the given buffer, partial</para><para>results may be copied.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="54" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ad40719d808c3e5e268f1184bd660577c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GetResultItems</definition>
        <argsstring>(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)</argsstring>
        <name>GetResultItems</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_details__t" kindref="compound">SteamItemDetails_t</ref>[]</type>
          <declname>pOutItemsArray</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>punOutItemsArraySize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies the contents of a result set into a flat array. The specific</para><para>contents of the result set depend on which query which was used.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="38" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a4d5e90e0993af0a88ef9e87e8a86a6ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_steamworks_1aa3f8a4f6fec6a62bc154bbaab3cb7522" kindref="member">EResult</ref></type>
        <definition>static EResult Steamworks.SteamGameServerInventory.GetResultStatus</definition>
        <argsstring>(SteamInventoryResult_t resultHandle)</argsstring>
        <name>GetResultStatus</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>INVENTORY ASYNC RESULT MANAGEMENT</para><para>Asynchronous inventory queries always output a result handle which can be used with</para><para>GetResultStatus, GetResultItems, etc. A <ref refid="struct_steamworks_1_1_steam_inventory_result_ready__t" kindref="compound">SteamInventoryResultReady_t</ref> callback will</para><para>be triggered when the asynchronous result becomes ready (or fails).</para><para>Find out the status of an asynchronous inventory result handle. Possible values:</para><para>k_EResultPending - still in progress</para><para>k_EResultOK - done, result ready</para><para>k_EResultExpired - done, result ready, maybe out of date (see DeserializeResult)</para><para>k_EResultInvalidParam - ERROR: invalid API call parameters</para><para>k_EResultServiceUnavailable - ERROR: service temporarily down, you may retry later</para><para>k_EResultLimitExceeded - ERROR: operation would exceed per-user inventory limits</para><para>k_EResultFail - ERROR: unknown / generic error</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="29" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ac2949fc2d56799e662fbd9156ff03cdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>static uint Steamworks.SteamGameServerInventory.GetResultTimestamp</definition>
        <argsstring>(SteamInventoryResult_t resultHandle)</argsstring>
        <name>GetResultTimestamp</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the server time at which the result was generated. Compare against</para><para>the value of IClientUtils::GetServerRealTime() to determine age.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="69" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a64ef049f67854aa6a7f33592ca8b4b4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.GrantPromoItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle)</argsstring>
        <name>GrantPromoItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1a64ef049f67854aa6a7f33592ca8b4b4f" kindref="member">GrantPromoItems()</ref> checks the list of promotional items for which the user may be eligible</para><para>and grants the items (one time only). On success, the result set will include items which</para><para>were granted, if any. If no items were granted because the user isn&apos;t eligible for any</para><para>promotions, this is still considered a success.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="182" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a004e905d2c5496dd692e8427f4c443ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.LoadItemDefinitions</definition>
        <argsstring>()</argsstring>
        <name>LoadItemDefinitions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ITEM DEFINITIONS</para><para>Item definitions are a mapping of &quot;definition IDs&quot; (integers between 1 and 1000000)</para><para>to a set of string properties. Some of these properties are required to display items</para><para>on the Steam community web site. Other properties can be defined by applications.</para><para>Use of these functions is optional; there is no reason to call LoadItemDefinitions</para><para>if your game hardcodes the numeric definition IDs (eg, purple face mask = 20, blue</para><para>weapon mod = 55) and does not allow for adding new item types without a client patch.</para><para>LoadItemDefinitions triggers the automatic load and refresh of item definitions.</para><para>Every time new item definitions are available (eg, from the dynamic addition of new</para><para>item types while players are still in-game), a <ref refid="struct_steamworks_1_1_steam_inventory_definition_update__t" kindref="compound">SteamInventoryDefinitionUpdate_t</ref></para><para>callback will be fired.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="294" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1adf952fa75bee25e90e47f9a09a980048" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref></type>
        <definition>static SteamAPICall_t Steamworks.SteamGameServerInventory.RequestEligiblePromoItemDefinitionsIDs</definition>
        <argsstring>(CSteamID steamID)</argsstring>
        <name>RequestEligiblePromoItemDefinitionsIDs</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request the list of &quot;eligible&quot; promo items that can be manually granted to the given</para><para>user. These are promo items of type &quot;manual&quot; that won&apos;t be granted automatically.</para><para>An example usage of this is an item that becomes available every week.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="338" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1a86481ed550f97f9b05efd2abae516718" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamGameServerInventory.SendItemDropHeartbeat</definition>
        <argsstring>()</argsstring>
        <name>SendItemDropHeartbeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TIMED DROPS AND PLAYTIME CREDIT</para><para>Deprecated. Calling this method is not required for proper playtime accounting.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="243" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ad03c30075b3747a693433a876d13422b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.SerializeResult</definition>
        <argsstring>(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)</argsstring>
        <name>SerializeResult</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>resultHandle</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pOutBuffer</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>punOutBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RESULT SERIALIZATION AND AUTHENTICATION</para><para>Serialized result sets contain a short signature which can&apos;t be forged</para><para>or replayed across different game sessions. A result set can be serialized</para><para>on the local client, transmitted to other players via your game networking,</para><para>and deserialized by the remote players. This is a secure way of preventing</para><para>hackers from lying about posessing rare/high-value items.</para><para>Serializes a result set with signature bytes to an output buffer. Pass</para><para>NULL as an output buffer to get the required size via punOutBufferSize.</para><para>The size of a serialized result depends on the number items which are being</para><para>serialized. When securely transmitting items to other players, it is</para><para>recommended to use &quot;GetItemsByID&quot; first to create a minimal result set.</para><para>Results have a built-in timestamp which will be considered &quot;expired&quot; after</para><para>an hour has elapsed. See DeserializeResult for expiration handling.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="136" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ac06077495c19e9edf36be28f81c70195" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.TradeItems</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)</argsstring>
        <name>TradeItems</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDTradePartner</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref>[]</type>
          <declname>pArrayGive</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>pArrayGiveQuantity</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nArrayGiveLength</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref>[]</type>
          <declname>pArrayGet</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>pArrayGetQuantity</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nArrayGetLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IN-GAME TRADING</para><para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1ac06077495c19e9edf36be28f81c70195" kindref="member">TradeItems()</ref> implements limited in-game trading of items, if you prefer not to use</para><para>the overlay or an in-game web browser to perform Steam Trading through the website.</para><para>You should implement a UI where both players can see and agree to a trade, and then</para><para>each client should call TradeItems simultaneously (+/- 5 seconds) with matching</para><para>(but reversed) parameters. The result is the same as if both players performed a</para><para>Steam Trading transaction through the web. Each player will get an inventory result</para><para>confirming the removal or quantity changes of the items given away, and the new</para><para>item instance id numbers and quantities of the received items.</para><para>(Note: new item instance IDs are generated whenever an item changes ownership.)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="276" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ab0b07d216c7dfccb7fcc68cd8fe928c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.TransferItemQuantity</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)</argsstring>
        <name>TransferItemQuantity</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref></type>
          <declname>itemIdSource</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unQuantity</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_instance_i_d__t" kindref="compound">SteamItemInstanceID_t</ref></type>
          <declname>itemIdDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_inventory_1ab0b07d216c7dfccb7fcc68cd8fe928c0" kindref="member">TransferItemQuantity()</ref> is intended for use with items which are &quot;stackable&quot; (can have</para><para>quantity greater than one). It can be used to split a stack into two, or to transfer</para><para>quantity from one stack into another stack of identical items. To split one stack into</para><para>two, pass k_SteamItemInstanceIDInvalid for itemIdDest and a new item will be generated.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="234" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_inventory_1ae852ba77889791cacf9101aca14ed68e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerInventory.TriggerItemDrop</definition>
        <argsstring>(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)</argsstring>
        <name>TriggerItemDrop</name>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_steam_inventory_result__t" kindref="compound">SteamInventoryResult_t</ref></type>
          <declname>pResultHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_steam_item_def__t" kindref="compound">SteamItemDef_t</ref></type>
          <declname>dropListDefinition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Playtime credit must be consumed and turned into item drops by your game. Only item</para><para>definitions which are marked as &quot;playtime item generators&quot; can be spawned. The call</para><para>will return an empty result set if there is not enough playtime credit for a drop.</para><para>Your game should call TriggerItemDrop at an appropriate time for the user to receive</para><para>new items, such as between rounds or while the player is dead. Note that players who</para><para>hack their clients could modify the value of &quot;dropListDefinition&quot;, so do not use it</para><para>to directly control rarity.</para><para>See your <ref refid="namespace_steamworks" kindref="compound">Steamworks</ref> configuration to set playtime drop rates for individual itemdefs.</para><para>The client library will suppress too-frequent calls to this method.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="259" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="259" bodyend="262"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" line="14" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameserverinventory.cs" bodystart="14" bodyend="352"/>
    <listofallmembers>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a171d03f2a00085b14805619d6033f0cf" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>AddPromoItem</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a42c2bd7de8925f7e15ce3b01dd05edae" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>AddPromoItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a132932a69b9df17a6b14cb914f6fb4e9" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>CheckResultSteamID</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a594aceb19c2e9d0da059b5ffd3189265" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>ConsumeItem</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ae54a6dd48330093c34c91a64c7d65c8f" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>DeserializeResult</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1aafe97957953c3e36e157867f1819c826" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>DestroyResult</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ab4c29990d3fa7f24b73443b4cd672aa6" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>ExchangeItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1afebd68a00fe79b862f35639e3f514044" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GenerateItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a98024c9df1cdbee8918c3e0703f0e23a" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetAllItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a839b6b75fef587c363fbaf19b5f2c628" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetEligiblePromoItemDefinitionIDs</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a63f6c33fe243f66a0870442328004389" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetItemDefinitionIDs</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ab5b6e6301cfcec350daa78e71950eb54" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetItemDefinitionProperty</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ab4e75e3e81dc21653e42785a3f787f78" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetItemsByID</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a8005d25ff8a9d751a54fe3940da33641" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetResultItemProperty</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ad40719d808c3e5e268f1184bd660577c" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetResultItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a4d5e90e0993af0a88ef9e87e8a86a6ae" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetResultStatus</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ac2949fc2d56799e662fbd9156ff03cdc" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GetResultTimestamp</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a64ef049f67854aa6a7f33592ca8b4b4f" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>GrantPromoItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a004e905d2c5496dd692e8427f4c443ae" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>LoadItemDefinitions</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1adf952fa75bee25e90e47f9a09a980048" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>RequestEligiblePromoItemDefinitionsIDs</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1a86481ed550f97f9b05efd2abae516718" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>SendItemDropHeartbeat</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ad03c30075b3747a693433a876d13422b" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>SerializeResult</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ac06077495c19e9edf36be28f81c70195" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>TradeItems</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ab0b07d216c7dfccb7fcc68cd8fe928c0" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>TransferItemQuantity</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_inventory_1ae852ba77889791cacf9101aca14ed68e" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerInventory</scope><name>TriggerItemDrop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
