<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_smooth_1_1_compare_1_1_configuration" kind="class" prot="public">
    <compoundname>Smooth::Compare::Configuration</compoundname>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_smooth_1_1_compare_1_1_configuration_1a29549051b33d101332fd04dafc65d02a" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type>bool</type>
        <definition>bool Smooth.Compare.Configuration.NoJit</definition>
        <argsstring></argsstring>
        <name>NoJit</name>
        <briefdescription>
<para>Convenience method for !UseJit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="161" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_smooth_1_1_compare_1_1_configuration_1ac6257291c2ed6e62ddb08101b0ee41ba" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type>bool</type>
        <definition>virtual bool Smooth.Compare.Configuration.UseJit</definition>
        <argsstring></argsstring>
        <name>UseJit</name>
        <briefdescription>
<para>This can be used to override the platform setting and enable or disable automatic comparer creation, which can be quite useful while testing in different environments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="156" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1af24e12f8e9dcd030a150d933d3da592b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; IComparer&lt; T &gt; &gt;</type>
        <definition>virtual Option&lt;IComparer&lt;T&gt; &gt; Smooth.Compare.Configuration.Comparer&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>Comparer&lt; T &gt;</name>
        <briefdescription>
<para>If JIT is enabled, this method is called by the finder when it is asked to supply a sort order comparer for an unregistered, non-IComparable&lt;T&gt; type. </para>        </briefdescription>
        <detaileddescription>
<para>If you want to write custom comparers using reflection, you can do so by overriding this method. </para><para><simplesect kind="return"><para>An option containing a sort order comparer for type T, or None to use the default comparer</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="169" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1aa624abc87ca029f16d73a3554c88de70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Smooth.Compare.Configuration.Configuration</definition>
        <argsstring>()</argsstring>
        <name>Configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor that simply adds a listener to <ref refid="class_smooth_1_1_compare_1_1_finder_1a530dc6102bbebea87b9fe58857988632" kindref="member">Finder.OnEvent</ref>.</para><para>If you supply a custom configuration, don&apos;t register types or do any comparsions from the constructor as the finder will not be fully initialized yet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="26" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1ad527accb550900784ca2541c055c762d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; IEqualityComparer&lt; T &gt; &gt;</type>
        <definition>virtual Option&lt;IEqualityComparer&lt;T&gt; &gt; Smooth.Compare.Configuration.EqualityComparer&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>EqualityComparer&lt; T &gt;</name>
        <briefdescription>
<para>If JIT is enabled, this method is called by the finder when it is asked to supply an equality comparer for an unregistered, non-IEquatable&lt;T&gt; type.. </para>        </briefdescription>
        <detaileddescription>
<para>If you want to write custom equality comparers using reflection, you can do so by overriding this method. </para><para><simplesect kind="return"><para>An option containing an equality comparer for type T, or None to use the default comparer</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="179" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1a0fd2ea93defcaaf34e67577fcdc21d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Smooth.Compare.Configuration.HandleFinderEvent</definition>
        <argsstring>(ComparerType comparerType, EventType eventType, Type type)</argsstring>
        <name>HandleFinderEvent</name>
        <param>
          <type><ref refid="namespace_smooth_1_1_compare_1aea2095b1709ee7519db783edebfff0ec" kindref="member">ComparerType</ref></type>
          <declname>comparerType</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_compare_1a038dbbd84c1d9094547c7d46c12e593a" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Listens for finder events which are useful for finding potential comparison problems. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation logs warnings on registration collisions, the use of inefficient or invalid comparers, and unregistered find requests for value types if JIT is disabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="132" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="132" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1a9cf37abb401be08ad5cbcafc15b35324" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Smooth.Compare.Configuration.RegisterComparers</definition>
        <argsstring>()</argsstring>
        <name>RegisterComparers</name>
        <briefdescription>
<para>Method called by the finder to set up registrations before any comparer requests are handled. </para>        </briefdescription>
        <detaileddescription>
<para>If you supply a custom configuration and want to apply the default registrations, add a call to base.RegisterComparers() from your method override. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="35" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="35" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_smooth_1_1_compare_1_1_configuration_1a0742dbcdc66724b1b30b1330d5bcc46e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Smooth.Compare.Configuration.Color32ToInt</definition>
        <argsstring>(Color32 c)</argsstring>
        <name>Color32ToInt</name>
        <param>
          <type>Color32</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Converts a 32-bit color to a 32-bit integer without loss of information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="186" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="186" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_smooth_1_1_compare_1_1_configuration" kindref="compound">Configuration</ref> class for <ref refid="namespace_smooth_1_1_compare" kindref="compound">Smooth.Compare</ref>.</para><para>To supply a custom configuration, simply add a class to your project called Smooth.Compare.CustomConfiguration that inherits from this type.</para><para>If a custom configuration exists, it will override the the default configuration.</para><para>Note: Don&apos;t edit this class directly, as it may get updated in future versions of <ref refid="namespace_smooth_1_1_compare" kindref="compound">Smooth.Compare</ref>. </para>    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" line="20" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Compare/Configuration.cs" bodystart="20" bodyend="189"/>
    <listofallmembers>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1a0742dbcdc66724b1b30b1330d5bcc46e" prot="public" virt="non-virtual"><scope>Smooth::Compare::Configuration</scope><name>Color32ToInt</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1af24e12f8e9dcd030a150d933d3da592b" prot="public" virt="virtual"><scope>Smooth::Compare::Configuration</scope><name>Comparer&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1aa624abc87ca029f16d73a3554c88de70" prot="public" virt="non-virtual"><scope>Smooth::Compare::Configuration</scope><name>Configuration</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1ad527accb550900784ca2541c055c762d" prot="public" virt="virtual"><scope>Smooth::Compare::Configuration</scope><name>EqualityComparer&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1a0fd2ea93defcaaf34e67577fcdc21d04" prot="public" virt="virtual"><scope>Smooth::Compare::Configuration</scope><name>HandleFinderEvent</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1a29549051b33d101332fd04dafc65d02a" prot="public" virt="non-virtual"><scope>Smooth::Compare::Configuration</scope><name>NoJit</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1a9cf37abb401be08ad5cbcafc15b35324" prot="public" virt="virtual"><scope>Smooth::Compare::Configuration</scope><name>RegisterComparers</name></member>
      <member refid="class_smooth_1_1_compare_1_1_configuration_1ac6257291c2ed6e62ddb08101b0ee41ba" prot="public" virt="non-virtual"><scope>Smooth::Compare::Configuration</scope><name>UseJit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
