<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kind="struct" prot="public">
    <compoundname>Smooth::Algebraics::Either&lt; L, R &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IComparable&lt; Either&lt; L, R &gt;&gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; Either&lt; L, R &gt;&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>L</type>
      </param>
      <param>
        <type><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab6ffd3417ac8bc989ffb9eef22d1a80c" prot="public" static="no" mutable="no">
        <type>readonly bool</type>
        <definition>readonly bool Smooth.Algebraics.Either&lt; L, R &gt;.isLeft</definition>
        <argsstring></argsstring>
        <name>isLeft</name>
        <briefdescription>
<para>True if the either contains an L value; otherwise, false; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="15" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a7ecb4fc8e64030e44e3dce47fc716983" prot="public" static="no" mutable="no">
        <type>readonly L</type>
        <definition>readonly L Smooth.Algebraics.Either&lt; L, R &gt;.leftValue</definition>
        <argsstring></argsstring>
        <name>leftValue</name>
        <briefdescription>
<para>If the either isLeft, the value contained by the either; otherwise, default(L). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="20" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a8bc05c2aa3815505bef86565c020ccf7" prot="public" static="no" mutable="no">
        <type>readonly <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref></type>
        <definition>readonly R Smooth.Algebraics.Either&lt; L, R &gt;.rightValue</definition>
        <argsstring></argsstring>
        <name>rightValue</name>
        <briefdescription>
<para>If the either isRight, the value contained by the either; otherwise, default(R). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="25" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a3f4a0473504a24b5e987a2bd5114fa84" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type>bool</type>
        <definition>bool Smooth.Algebraics.Either&lt; L, R &gt;.isRight</definition>
        <argsstring></argsstring>
        <name>isRight</name>
        <briefdescription>
<para>True if the either contains an R value; otherwise, false; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="30" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a0ccc14631fd87486002d9e7b7cd887c5" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; L &gt;</type>
        <definition>Option&lt;L&gt; Smooth.Algebraics.Either&lt; L, R &gt;.leftOption</definition>
        <argsstring></argsstring>
        <name>leftOption</name>
        <briefdescription>
<para>If the either isLeft, the an option containing the either&apos;s value; otherwise, an empty option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="35" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ae6eae395035792f99a1766304286d6ba" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
        <definition>Option&lt;R&gt; Smooth.Algebraics.Either&lt; L, R &gt;.rightOption</definition>
        <argsstring></argsstring>
        <name>rightOption</name>
        <briefdescription>
<para>If the either isRight, the an option containing the either&apos;s value; otherwise, an empty option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="40" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab3102331c1bc7691435b0a7c6543e7f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
        <definition>static Either&lt;L, R&gt; Smooth.Algebraics.Either&lt; L, R &gt;.Left</definition>
        <argsstring>(L value)</argsstring>
        <name>Left</name>
        <param>
          <type>L</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns a left either containing the specified value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="46" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a5ea73a471dddb8b1c88cdd7f8f550871" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator!=</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="143" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a4aa510e73378e62c12188e5ff4909cdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator&lt;</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="151" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a7ba4b452483d792b559b0d11365bf74e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator&lt;=</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="159" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a53746142bec07a848ff0f12fe43d65d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator==</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="139" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ace404eec9df7effac09bfdd95d172254" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator&gt;</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="147" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab1f31b2efed44856249383739fe81f47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Algebraics.Either&lt; L, R &gt;.operator&gt;=</definition>
        <argsstring>(Either&lt; L, R &gt; lhs, Either&lt; L, R &gt; rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="155" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1af3a084301eb784b52872e16f43dcbeee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
        <definition>static Either&lt;L, R&gt; Smooth.Algebraics.Either&lt; L, R &gt;.Right</definition>
        <argsstring>(R value)</argsstring>
        <name>Right</name>
        <param>
          <type><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns a right either containing the specified value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="54" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="54" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a1068a19966b5f66a6ceb31222a0fac02" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Smooth.Algebraics.Either&lt; L, R &gt;.Either</definition>
        <argsstring>(bool isLeft, L leftValue, R rightValue)</argsstring>
        <name>Either</name>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <param>
          <type>L</type>
          <declname>leftValue</declname>
        </param>
        <param>
          <type><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref></type>
          <declname>rightValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="58" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="58" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a82ad9da363c3c7aab5e8063ef60db703" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>V</type>
        <definition>V Smooth.Algebraics.Either&lt; L, R &gt;.Cata&lt; V &gt;</definition>
        <argsstring>(DelegateFunc&lt; L, V &gt; leftFunc, DelegateFunc&lt; R, V &gt; rightFunc)</argsstring>
        <name>Cata&lt; V &gt;</name>
        <param>
          <type>DelegateFunc&lt; L, V &gt;</type>
          <declname>leftFunc</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, V &gt;</type>
          <declname>rightFunc</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, returns leftFunc applied to the either&apos;s value; otherwise, returns rightFunc applied to the either&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="67" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a41feb9de025db02eb20896eb436bce72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>V</type>
        <definition>V Smooth.Algebraics.Either&lt; L, R &gt;.Cata&lt; V, P &gt;</definition>
        <argsstring>(DelegateFunc&lt; L, P, V &gt; leftFunc, P p, DelegateFunc&lt; R, V &gt; rightFunc)</argsstring>
        <name>Cata&lt; V, P &gt;</name>
        <param>
          <type>DelegateFunc&lt; L, P, V &gt;</type>
          <declname>leftFunc</declname>
        </param>
        <param>
          <type>P</type>
          <declname>p</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, V &gt;</type>
          <declname>rightFunc</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, returns leftFunc applied to the either&apos;s value and p; otherwise, returns rightFunc applied to the either&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="74" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a79e04567e22b0f217bef0e326c87509a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>V</type>
        <definition>V Smooth.Algebraics.Either&lt; L, R &gt;.Cata&lt; V, P, P2 &gt;</definition>
        <argsstring>(DelegateFunc&lt; L, P, V &gt; leftFunc, P p, DelegateFunc&lt; R, P2, V &gt; rightFunc, P2 p2)</argsstring>
        <name>Cata&lt; V, P, P2 &gt;</name>
        <param>
          <type>DelegateFunc&lt; L, P, V &gt;</type>
          <declname>leftFunc</declname>
        </param>
        <param>
          <type>P</type>
          <declname>p</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, P2, V &gt;</type>
          <declname>rightFunc</declname>
        </param>
        <param>
          <type>P2</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, returns leftFunc applied to the either&apos;s value and p; otherwise, returns rightFunc applied to the either&apos;s value and p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="88" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a510ce6b86cd615c747dd56ddedc2a22f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>V</type>
        <definition>V Smooth.Algebraics.Either&lt; L, R &gt;.Cata&lt; V, P2 &gt;</definition>
        <argsstring>(DelegateFunc&lt; L, V &gt; leftFunc, DelegateFunc&lt; R, P2, V &gt; rightFunc, P2 p2)</argsstring>
        <name>Cata&lt; V, P2 &gt;</name>
        <param>
          <type>DelegateFunc&lt; L, V &gt;</type>
          <declname>leftFunc</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, P2, V &gt;</type>
          <declname>rightFunc</declname>
        </param>
        <param>
          <type>P2</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, returns leftFunc applied to the either&apos;s value; otherwise, returns rightFunc applied to the either&apos;s value and p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="81" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1aff5e9701b50c7ac141150f78b8011210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Smooth.Algebraics.Either&lt; L, R &gt;.CompareTo</definition>
        <argsstring>(Either&lt; L, R &gt; other)</argsstring>
        <name>CompareTo</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="134" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a5f329df8bc0101f79761fb127d01ea37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Smooth.Algebraics.Either&lt; L, R &gt;.Equals</definition>
        <argsstring>(object o)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="120" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ac3c904854a0210561768177d2349cb94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Smooth.Algebraics.Either&lt; L, R &gt;.Equals</definition>
        <argsstring>(Either&lt; L, R &gt; other)</argsstring>
        <name>Equals</name>
        <param>
          <type>Either&lt; L, <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="124" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ad4188617de40900db19936a91ccb8c97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Smooth.Algebraics.Either&lt; L, R &gt;.ForEach</definition>
        <argsstring>(DelegateAction&lt; L &gt; leftAction, DelegateAction&lt; R &gt; rightAction)</argsstring>
        <name>ForEach</name>
        <param>
          <type>DelegateAction&lt; L &gt;</type>
          <declname>leftAction</declname>
        </param>
        <param>
          <type>DelegateAction&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rightAction</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, applies leftAction to the either&apos;s value; otherwise, applies rightAction to the either&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="95" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ac6276babff064722bf6e030f6015f04f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Smooth.Algebraics.Either&lt; L, R &gt;.ForEach&lt; P &gt;</definition>
        <argsstring>(DelegateAction&lt; L, P &gt; leftAction, P p, DelegateAction&lt; R &gt; rightAction)</argsstring>
        <name>ForEach&lt; P &gt;</name>
        <param>
          <type>DelegateAction&lt; L, P &gt;</type>
          <declname>leftAction</declname>
        </param>
        <param>
          <type>P</type>
          <declname>p</declname>
        </param>
        <param>
          <type>DelegateAction&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref> &gt;</type>
          <declname>rightAction</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, applies leftAction to the either&apos;s value and p; otherwise, applies rightAction to the either&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="102" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ae794b9a265cf42276fb186c1b801d874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Smooth.Algebraics.Either&lt; L, R &gt;.ForEach&lt; P, P2 &gt;</definition>
        <argsstring>(DelegateAction&lt; L, P &gt; leftAction, P p, DelegateAction&lt; R, P2 &gt; rightAction, P2 p2)</argsstring>
        <name>ForEach&lt; P, P2 &gt;</name>
        <param>
          <type>DelegateAction&lt; L, P &gt;</type>
          <declname>leftAction</declname>
        </param>
        <param>
          <type>P</type>
          <declname>p</declname>
        </param>
        <param>
          <type>DelegateAction&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, P2 &gt;</type>
          <declname>rightAction</declname>
        </param>
        <param>
          <type>P2</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, applies leftAction to the either&apos;s value and p; otherwise, applies rightAction to the either&apos;s value and p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="116" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a2a18283f7e191b2cfb56f176a8712b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Smooth.Algebraics.Either&lt; L, R &gt;.ForEach&lt; P2 &gt;</definition>
        <argsstring>(DelegateAction&lt; L &gt; leftAction, DelegateAction&lt; R, P2 &gt; rightAction, P2 p2)</argsstring>
        <name>ForEach&lt; P2 &gt;</name>
        <param>
          <type>DelegateAction&lt; L &gt;</type>
          <declname>leftAction</declname>
        </param>
        <param>
          <type>DelegateAction&lt; <ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>, P2 &gt;</type>
          <declname>rightAction</declname>
        </param>
        <param>
          <type>P2</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>If the either isLeft, applies leftAction to the either&apos;s value; otherwise, applies rightAction to the either&apos;s value and p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="109" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a4bf95ffa3358f2a2e3bfba6224f00cb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Smooth.Algebraics.Either&lt; L, R &gt;.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="129" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a66889f6362b7fe50fbd0fa090c1e75af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override string</type>
        <definition>override string Smooth.Algebraics.Either&lt; L, R &gt;.ToString</definition>
        <argsstring>()</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="163" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="163" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Struct representing a value that can be an instance of either the L (left) or the R (right) type. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="48065">
        <label>IEquatable&lt; Either&lt; L, R &gt;&gt;</label>
      </node>
      <node id="48064">
        <label>IComparable&lt; Either&lt; L, R &gt;&gt;</label>
      </node>
      <node id="48063">
        <label>Smooth.Algebraics.Either&lt; L, R &gt;</label>
        <link refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4"/>
        <childnode refid="48064" relation="public-inheritance">
        </childnode>
        <childnode refid="48065" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="48068">
        <label>IEquatable&lt; Either&lt; L, R &gt;&gt;</label>
      </node>
      <node id="48067">
        <label>IComparable&lt; Either&lt; L, R &gt;&gt;</label>
      </node>
      <node id="48066">
        <label>Smooth.Algebraics.Either&lt; L, R &gt;</label>
        <link refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4"/>
        <childnode refid="48067" relation="public-inheritance">
        </childnode>
        <childnode refid="48068" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" line="11" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs" bodystart="11" bodyend="166"/>
    <listofallmembers>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a82ad9da363c3c7aab5e8063ef60db703" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Cata&lt; V &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a41feb9de025db02eb20896eb436bce72" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Cata&lt; V, P &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a79e04567e22b0f217bef0e326c87509a" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Cata&lt; V, P, P2 &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a510ce6b86cd615c747dd56ddedc2a22f" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Cata&lt; V, P2 &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1aff5e9701b50c7ac141150f78b8011210" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>CompareTo</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a1068a19966b5f66a6ceb31222a0fac02" prot="private" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Either</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a5f329df8bc0101f79761fb127d01ea37" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Equals</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ac3c904854a0210561768177d2349cb94" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Equals</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ad4188617de40900db19936a91ccb8c97" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>ForEach</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ac6276babff064722bf6e030f6015f04f" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>ForEach&lt; P &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ae794b9a265cf42276fb186c1b801d874" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>ForEach&lt; P, P2 &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a2a18283f7e191b2cfb56f176a8712b54" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>ForEach&lt; P2 &gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a4bf95ffa3358f2a2e3bfba6224f00cb7" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>GetHashCode</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab6ffd3417ac8bc989ffb9eef22d1a80c" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>isLeft</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a3f4a0473504a24b5e987a2bd5114fa84" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>isRight</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab3102331c1bc7691435b0a7c6543e7f1" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Left</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a0ccc14631fd87486002d9e7b7cd887c5" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>leftOption</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a7ecb4fc8e64030e44e3dce47fc716983" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>leftValue</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a5ea73a471dddb8b1c88cdd7f8f550871" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator!=</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a4aa510e73378e62c12188e5ff4909cdf" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator&lt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a7ba4b452483d792b559b0d11365bf74e" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator&lt;=</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a53746142bec07a848ff0f12fe43d65d2" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator==</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ace404eec9df7effac09bfdd95d172254" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator&gt;</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab1f31b2efed44856249383739fe81f47" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>operator&gt;=</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1af3a084301eb784b52872e16f43dcbeee" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>Right</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ae6eae395035792f99a1766304286d6ba" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>rightOption</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a8bc05c2aa3815505bef86565c020ccf7" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>rightValue</name></member>
      <member refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a66889f6362b7fe50fbd0fa090c1e75af" prot="public" virt="non-virtual"><scope>Smooth::Algebraics::Either&lt; L, R &gt;</scope><name>ToString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
