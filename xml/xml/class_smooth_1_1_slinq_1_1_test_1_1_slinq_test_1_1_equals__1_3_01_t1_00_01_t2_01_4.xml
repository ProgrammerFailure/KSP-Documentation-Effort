<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4" kind="class" prot="public">
    <compoundname>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; Equals_1&lt; T1, T2 &gt;&gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IEqualityComparer&lt; Smooth.Algebraics.Tuple&lt; T1, T2 &gt;&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>T1</type>
      </param>
      <param>
        <type>T2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ad50e8780a1a27f744fdf853924db2fa7" prot="public" static="no" mutable="no">
        <type>readonly IEqualityComparer&lt; T1 &gt;</type>
        <definition>readonly IEqualityComparer&lt;T1&gt; Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.equalityComparer</definition>
        <argsstring></argsstring>
        <name>equalityComparer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="602" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="602" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1a9a57522962a038440e02709b50fc0569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.Equals</definition>
        <argsstring>(object o)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="612" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aa759bd1eff81b7ca6dd035c9bc5bf9f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.Equals</definition>
        <argsstring>(Equals_1&lt; T1, T2 &gt; other)</argsstring>
        <name>Equals</name>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" kindref="member">Equals_1</ref>&lt; T1, T2 &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="616" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="616" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1abe96018bd18fd9936018baea6a315167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.Equals</definition>
        <argsstring>(Smooth.Algebraics.Tuple&lt; T1, T2 &gt; a, Smooth.Algebraics.Tuple&lt; T1, T2 &gt; b)</argsstring>
        <name>Equals</name>
        <param>
          <type><ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T1, T2 &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T1, T2 &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="632" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="632" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.Equals_1</definition>
        <argsstring>()</argsstring>
        <name>Equals_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="604" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="604" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ac838c2a9cc935b11d684ec1888011813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.Equals_1</definition>
        <argsstring>(IEqualityComparer&lt; T1 &gt; equalityComparer)</argsstring>
        <name>Equals_1</name>
        <param>
          <type>IEqualityComparer&lt; T1 &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="608" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="608" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ab56a64560f3e6b967277753146069734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="620" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="620" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ac019f5182f80e6c90ab2aa73f712b1fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.GetHashCode</definition>
        <argsstring>(Smooth.Algebraics.Tuple&lt; T1, T2 &gt; a)</argsstring>
        <name>GetHashCode</name>
        <param>
          <type><ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T1, T2 &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="636" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="636" bodyend="638"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ae56586f4eed39e0c57fa9d57f23a6645" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.operator!=</definition>
        <argsstring>(Equals_1&lt; T1, T2 &gt; lhs, Equals_1&lt; T1, T2 &gt; rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" kindref="member">Equals_1</ref>&lt; T1, T2 &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" kindref="member">Equals_1</ref>&lt; T1, T2 &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="628" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="628" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1af497a57ab3b7e43d884d98a644e751f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;.operator==</definition>
        <argsstring>(Equals_1&lt; T1, T2 &gt; lhs, Equals_1&lt; T1, T2 &gt; rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" kindref="member">Equals_1</ref>&lt; T1, T2 &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" kindref="member">Equals_1</ref>&lt; T1, T2 &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="624" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="624" bodyend="626"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="48696">
        <label>IEquatable&lt; Equals_1&lt; T1, T2 &gt;&gt;</label>
      </node>
      <node id="48695">
        <label>Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;</label>
        <link refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4"/>
        <childnode refid="48696" relation="public-inheritance">
        </childnode>
        <childnode refid="48697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48697">
        <label>IEqualityComparer&lt; Smooth.Algebraics.Tuple&lt; T1, T2 &gt;&gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="48699">
        <label>IEquatable&lt; Equals_1&lt; T1, T2 &gt;&gt;</label>
      </node>
      <node id="48698">
        <label>Smooth.Slinq.Test.SlinqTest.Equals_1&lt; T1, T2 &gt;</label>
        <link refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4"/>
        <childnode refid="48699" relation="public-inheritance">
        </childnode>
        <childnode refid="48700" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48700">
        <label>IEqualityComparer&lt; Smooth.Algebraics.Tuple&lt; T1, T2 &gt;&gt;</label>
      </node>
    </collaborationgraph>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" line="601" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Test/SlinqTest.cs" bodystart="601" bodyend="639"/>
    <listofallmembers>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ad50e8780a1a27f744fdf853924db2fa7" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>equalityComparer</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1a9a57522962a038440e02709b50fc0569" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>Equals</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aa759bd1eff81b7ca6dd035c9bc5bf9f9" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>Equals</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1abe96018bd18fd9936018baea6a315167" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>Equals</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1aeb2562d532180338203579a7bdc1bf8d" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>Equals_1</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ac838c2a9cc935b11d684ec1888011813" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>Equals_1</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ab56a64560f3e6b967277753146069734" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>GetHashCode</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ac019f5182f80e6c90ab2aa73f712b1fa" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>GetHashCode</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1ae56586f4eed39e0c57fa9d57f23a6645" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>operator!=</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_test_1_1_slinq_test_1_1_equals__1_3_01_t1_00_01_t2_01_4_1af497a57ab3b7e43d884d98a644e751f1" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Test::SlinqTest::Equals_1&lt; T1, T2 &gt;</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
