<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_smooth_1_1_slinq_1_1_slinq" kind="class" prot="public">
    <compoundname>Smooth::Slinq::Slinq</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a7e2001cd60a94129e0814952a2b089e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, AggregateContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, AggregateContext&lt;U, T, C&gt; &gt; Smooth.Slinq.Slinq.AggregateRunning&lt; U, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, U seed, DelegateFunc&lt; U, T, U &gt; selector)</argsstring>
        <name>AggregateRunning&lt; U, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>U</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; U, T, U &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that performs a running aggegatation over the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1784" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1784" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af921e014efd3b33d59132c3ef3b95e83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, AggregateContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, AggregateContext&lt;U, T, C, P&gt; &gt; Smooth.Slinq.Slinq.AggregateRunning&lt; U, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, U seed, DelegateFunc&lt; U, T, P, U &gt; selector, P parameter)</argsstring>
        <name>AggregateRunning&lt; U, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>U</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; U, T, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that performs a running aggegatation over the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1791" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1791" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1abea354194b6d472f75464999e2e6cb2a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Double</type>
        <definition>static Double Smooth.Slinq.Slinq.Average&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int32, C &gt; slinq)</argsstring>
        <name>Average&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int32, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2688" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2688" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a41f2099ac49a9f8d3cd34360972842d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Double</type>
        <definition>static Double Smooth.Slinq.Slinq.Average&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int64, C &gt; slinq)</argsstring>
        <name>Average&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int64, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2697" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2697" bodyend="2699"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af130672e4d2a701f61a27ba059279fa6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Single</type>
        <definition>static Single Smooth.Slinq.Slinq.Average&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Single, C &gt; slinq)</argsstring>
        <name>Average&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Single, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2706" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2706" bodyend="2708"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a8a2c39a99c8cd793c63a8ee758096b73" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Double</type>
        <definition>static Double Smooth.Slinq.Slinq.Average&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Double, C &gt; slinq)</argsstring>
        <name>Average&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Double, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2715" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2715" bodyend="2717"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1abb04ec76fd9d3e940c336c852c3be611" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; Double &gt;</type>
        <definition>static Option&lt;Double&gt; Smooth.Slinq.Slinq.AverageOrNone&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int32, C &gt; slinq)</argsstring>
        <name>AverageOrNone&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int32, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(), but returns an option rather than throwing an exception on empty input. </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2733" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2733" bodyend="2746"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1addd0021c3182b03968155eb01adb4422" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; Double &gt;</type>
        <definition>static Option&lt;Double&gt; Smooth.Slinq.Slinq.AverageOrNone&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int64, C &gt; slinq)</argsstring>
        <name>AverageOrNone&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int64, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(), but returns an option rather than throwing an exception on empty input. </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2753" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2753" bodyend="2766"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ac663a1d2cb20aea4745bb1e5a0695baf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; Single &gt;</type>
        <definition>static Option&lt;Single&gt; Smooth.Slinq.Slinq.AverageOrNone&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Single, C &gt; slinq)</argsstring>
        <name>AverageOrNone&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Single, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(), but returns an option rather than throwing an exception on empty input. </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2773" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2773" bodyend="2786"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a553a5ac28447a6730c4bd5badbe51441" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; Double &gt;</type>
        <definition>static Option&lt;Double&gt; Smooth.Slinq.Slinq.AverageOrNone&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Double, C &gt; slinq)</argsstring>
        <name>AverageOrNone&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Double, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Average(), but returns an option rather than throwing an exception on empty input. </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2793" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2793" bodyend="2806"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1afe7acd97132bcc565c5cd341c0e56b1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, ConcatContext&lt;C2, T, C&gt; &gt; Smooth.Slinq.Slinq.Concat&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; first, Slinq&lt; T, C2 &gt; second)</argsstring>
        <name>Concat&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Concat(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1798" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1798" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aa844468bfe83d0e3ea05fc7f34af1863" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, EitherContext&lt; OptionContext&lt; T &gt;, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, EitherContext&lt;OptionContext&lt;T&gt;, T, C&gt; &gt; Smooth.Slinq.Slinq.DefaultIfEmpty&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>DefaultIfEmpty&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.DefaultIfEmpty(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1805" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1805" bodyend="1809"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a37882d92f0e1a3d6a4e27d45c4c61bf5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, EitherContext&lt; OptionContext&lt; T &gt;, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, EitherContext&lt;OptionContext&lt;T&gt;, T, C&gt; &gt; Smooth.Slinq.Slinq.DefaultIfEmpty&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, T defaultValue)</argsstring>
        <name>DefaultIfEmpty&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.DefaultIfEmpty(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1814" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1814" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a7b98df980379db31e2776ff0b4cdad4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>Distinct&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1837" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1837" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a20d8b7ec4cf96db1cbf7be5c0ac5d727" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Distinct&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1844" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1844" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1abda5783cdd86403556b54fde329b1e4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>Distinct&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1851" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1851" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aee3a50c87d1e228ea6fe38a300da05a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Distinct&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1858" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1858" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af68935ba55f1645c10aedc024f9fdb41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>Distinct&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1823" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1823" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af083d23f5877ab8ff53ff53e6e0532ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Distinct&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, IEqualityComparer&lt; T &gt; comparer)</argsstring>
        <name>Distinct&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Distinct(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1830" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1830" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a31ca5253e2233a9f1dcb63c096211b74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Except&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other)</argsstring>
        <name>Except&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1865" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1865" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a6f5467b8404b00de7846111e90025aa5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Except&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, IEqualityComparer&lt; T &gt; comparer)</argsstring>
        <name>Except&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1872" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1872" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a47f9d2d344df90704982158967b418e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Except&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>Except&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1879" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1879" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a4747044f00348604f53663ce599acb6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Except&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Except&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1886" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1886" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a1ab9bca999929aa08e745f7bca4a203c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Except&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>Except&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1893" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1893" bodyend="1895"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a801a2c73e3e17c8c4ccb28d6bb13f4cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Except&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Except&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Except(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1900" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1900" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1acd8ba70a5559bcac545e9a7a1c217496" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, FlattenContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, FlattenContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Flatten&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; Option&lt; T &gt;, C &gt; slinq)</argsstring>
        <name>Flatten&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates over each of the nested elements in the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>See: SelectMany(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1918" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1918" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a6f891bb91c0c1edaf15c2ed813e631f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, FlattenContext&lt; T, C1, C2 &gt; &gt;</type>
        <definition>static Slinq&lt;T, FlattenContext&lt;T, C1, C2&gt; &gt; Smooth.Slinq.Slinq.Flatten&lt; T, C1, C2 &gt;</definition>
        <argsstring>(this Slinq&lt; Slinq&lt; T, C1 &gt;, C2 &gt; slinq)</argsstring>
        <name>Flatten&lt; T, C1, C2 &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C1 &gt;, C2 &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates over each of the nested elements in the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>See: SelectMany(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1909" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1909" bodyend="1911"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a7d785d2c35487e02898b4f6a894b1820" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_slinq_1_1_collections_1_1_grouping" kindref="compound">Grouping</ref>&lt; K, T, LinkedContext&lt; T &gt; &gt;, GroupByContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;Grouping&lt;K, T, LinkedContext&lt;T&gt; &gt;, GroupByContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.GroupBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>GroupBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupBy(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1925" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1925" bodyend="1927"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ac7daf1cd9165f39825e4a7c94edaa299" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_slinq_1_1_collections_1_1_grouping" kindref="compound">Grouping</ref>&lt; K, T, LinkedContext&lt; T &gt; &gt;, GroupByContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;Grouping&lt;K, T, LinkedContext&lt;T&gt; &gt;, GroupByContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.GroupBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>GroupBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupBy(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1932" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1932" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a53632d486b48496bca763b8fc0bb9cbf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_slinq_1_1_collections_1_1_grouping" kindref="compound">Grouping</ref>&lt; K, T, LinkedContext&lt; T &gt; &gt;, GroupByContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;Grouping&lt;K, T, LinkedContext&lt;T&gt; &gt;, GroupByContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.GroupBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>GroupBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupBy(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1939" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1939" bodyend="1941"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a81f7df48a7924bf30eeebe644fd465e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_slinq_1_1_collections_1_1_grouping" kindref="compound">Grouping</ref>&lt; K, T, LinkedContext&lt; T &gt; &gt;, GroupByContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;Grouping&lt;K, T, LinkedContext&lt;T&gt; &gt;, GroupByContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.GroupBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>GroupBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupBy(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1946" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1946" bodyend="1948"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ac304060efd9c3dd3ce85058f65405430" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, GroupJoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, GroupJoinContext&lt;U, K, T2, T, C&gt; &gt; Smooth.Slinq.Slinq.GroupJoin&lt; U, K, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, K &gt; outerSelector, DelegateFunc&lt; T2, K &gt; innerSelector, DelegateFunc&lt; T, Slinq&lt; T2, LinkedContext&lt; T2 &gt;&gt;, U &gt; resultSelector)</argsstring>
        <name>GroupJoin&lt; U, K, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, LinkedContext&lt; T2 &gt;&gt;, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupJoin(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1953" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1953" bodyend="1955"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a09ed102ff5316cf39b8e56a84a8fba42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, GroupJoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, GroupJoinContext&lt;U, K, T2, T, C&gt; &gt; Smooth.Slinq.Slinq.GroupJoin&lt; U, K, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, K &gt; outerSelector, DelegateFunc&lt; T2, K &gt; innerSelector, DelegateFunc&lt; T, Slinq&lt; T2, LinkedContext&lt; T2 &gt;&gt;, U &gt; resultSelector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>GroupJoin&lt; U, K, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, LinkedContext&lt; T2 &gt;&gt;, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupJoin(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1960" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1960" bodyend="1962"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1afdb16f01a5163dc9481468ad59cef9a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, GroupJoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, GroupJoinContext&lt;U, K, T2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, P, K &gt; outerSelector, DelegateFunc&lt; T2, P, K &gt; innerSelector, DelegateFunc&lt; T, Slinq&lt; T2, LinkedContext&lt; T2 &gt;&gt;, P, U &gt; resultSelector, P parameter)</argsstring>
        <name>GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, P, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, LinkedContext&lt; T2 &gt;&gt;, P, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupJoin(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1967" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1967" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1abd3a1ed494fe9ce0c304eaa18eb1f1c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, GroupJoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, GroupJoinContext&lt;U, K, T2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, P, K &gt; outerSelector, DelegateFunc&lt; T2, P, K &gt; innerSelector, DelegateFunc&lt; T, Slinq&lt; T2, LinkedContext&lt; T2 &gt;&gt;, P, U &gt; resultSelector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, P, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, LinkedContext&lt; T2 &gt;&gt;, P, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.GroupJoin(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1974" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1974" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad1d39f81e043aeba2830221d51bc6d04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other)</argsstring>
        <name>Intersect&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1981" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1981" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a374b1f2a969b381f87e6167d80d59ed4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, IEqualityComparer&lt; T &gt; comparer)</argsstring>
        <name>Intersect&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1988" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1988" bodyend="1990"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1acd0bdf063210016c78f6ad2c98cd1659" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>Intersect&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1995" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1995" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a84501982acfa12791fffab8e20af2633" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Intersect&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2002" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2002" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aeac8aae900236dc7529cb190107e3f17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>Intersect&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2009" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2009" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aebf950d6084d5571e6908b4cd741f1ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Intersect&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Intersect&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Intersect(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2016" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2016" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aae696b1acef9c9760f0d80fa97cea780" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, JoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, JoinContext&lt;U, K, T2, T, C&gt; &gt; Smooth.Slinq.Slinq.Join&lt; U, K, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, K &gt; outerSelector, DelegateFunc&lt; T2, K &gt; innerSelector, DelegateFunc&lt; T, T2, U &gt; resultSelector)</argsstring>
        <name>Join&lt; U, K, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Join(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2023" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2023" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a1aca0f4d53fc0e99ee0e950b578a13e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, JoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, JoinContext&lt;U, K, T2, T, C&gt; &gt; Smooth.Slinq.Slinq.Join&lt; U, K, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, K &gt; outerSelector, DelegateFunc&lt; T2, K &gt; innerSelector, DelegateFunc&lt; T, T2, U &gt; resultSelector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Join&lt; U, K, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Join(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2030" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2030" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad37d0bdbec4b235eed62924a9ce0577a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, JoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, JoinContext&lt;U, K, T2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Join&lt; U, K, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, P, K &gt; outerSelector, DelegateFunc&lt; T2, P, K &gt; innerSelector, DelegateFunc&lt; T, T2, P, U &gt; resultSelector, P parameter)</argsstring>
        <name>Join&lt; U, K, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, P, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, P, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Join(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2037" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2037" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5da32ce52220d8d795ea8e349e36a9a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, JoinContext&lt; U, K, T2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, JoinContext&lt;U, K, T2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Join&lt; U, K, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; outer, Slinq&lt; T2, C2 &gt; inner, DelegateFunc&lt; T, P, K &gt; outerSelector, DelegateFunc&lt; T2, P, K &gt; innerSelector, DelegateFunc&lt; T, T2, P, U &gt; resultSelector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Join&lt; U, K, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>outerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T2, P, K &gt;</type>
          <declname>innerSelector</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, P, U &gt;</type>
          <declname>resultSelector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Join(), with removal operations chained to the outer <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2044" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2044" bodyend="2046"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a01b501aaeecc21946455aa66a039c002" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>OrderBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2134" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2134" bodyend="2136"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a99bc8d1b1da65024713f2507a2cee93b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2145" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2145" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ab2590a6638b0c5eadaef1eca1e0d63ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2156" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2156" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a8d4dcfec79d1d366cf9e0bfc1e240506" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, Comparison&lt; K &gt; comparison, bool ascending)</argsstring>
        <name>OrderBy&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> as ordered by the specified key selector, comparison, and ordering. </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2200" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2200" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ac58256f1a767d26522c993c9037ad0c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>OrderBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2213" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2213" bodyend="2215"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ae6bb2642785411fee352426109d5aa3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2224" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2224" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1adea2399473617860aae56333d5b687f8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2235" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2235" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1acb4bd12c1551795b9ed5d14f50714303" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, Comparison&lt; K &gt; comparison, bool ascending)</argsstring>
        <name>OrderBy&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> as ordered by the specified key selector, comparison, and ordering. </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2279" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2279" bodyend="2283"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a3e1edd76c8f3fa79e7dc0def8aae97c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>OrderBy&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2055" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2055" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ae6d044719c5c0765cdd8e3254013e4e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, IComparer&lt; T &gt; comparer)</argsstring>
        <name>OrderBy&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>IComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2066" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2066" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a3fe68af6ddf5818adcea040c6b2a9ce0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Comparison&lt; T &gt; comparison)</argsstring>
        <name>OrderBy&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderBy(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2077" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2077" bodyend="2079"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad96cb8a8d67463da2a0237d3f57c2253" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderBy&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Comparison&lt; T &gt; comparison, bool ascending)</argsstring>
        <name>OrderBy&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> as ordered by the specified key selector, comparison, and ordering. </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2121" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2121" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a9aea463228089a0bacca74b0d70db555" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>OrderByDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2167" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2167" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a2f76914d53912f138053a3544dfc4f4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2178" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2178" bodyend="2180"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a70a246d23032dd40a34fd40570df90be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2189" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2189" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ab24b63936e85b2f2f0ef1286777cfe43" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>OrderByDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2246" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2246" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5be21338054bdcab1732116a3c83f356" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2257" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2257" bodyend="2259"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad7e40871cee9769de6ac890419eb39d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; K, T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;K, T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2268" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2268" bodyend="2270"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a096f10a1d1bee28250ea090df9e6891b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>OrderByDescending&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2088" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2088" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ada450e4d99a61073f1c58e0ff125a878" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, IComparer&lt; T &gt; comparer)</argsstring>
        <name>OrderByDescending&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>IComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2099" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2099" bodyend="2101"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a1056f5f55b78deb35895aa4f2056bda4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByDescending&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Comparison&lt; T &gt; comparison)</argsstring>
        <name>OrderByDescending&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.OrderByDescending(). </para>        </briefdescription>
        <detaileddescription>
<para>This method uses a linked list merge sort algorithm and has O(n) space complexity and O(n log n) average and worst case time complexity.</para><para>Note: The <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> API does not provide methods for ThenBy() orderings, to sort by multiple values in succession you should supply a composite key and/or comparision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2110" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2110" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a841b70ec0334e4cd14a2ce49a2c246d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>OrderByGroup&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and the default equality comparer for K, with the groups ordered by the default sort order comparer for K. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2290" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2290" bodyend="2292"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a833de96bd27bbe89a2c085aee5ae7eb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; equalityComparer, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByGroup&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered by the specified sort order comparer. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2299" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2299" bodyend="2301"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a940e30ae51e0cd485c1353738ef49e06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; equalityComparer, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByGroup&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered by the specified comparison. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2308" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2308" bodyend="2310"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a966ba0ea21e081045d55cf600f9dc2e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>OrderByGroup&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and the default equality comparer for K, with the groups ordered by the default sort order comparer for K. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2344" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2344" bodyend="2346"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a0ab1066ef9e54af86d4427f6508d6d2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; equalityComparer, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByGroup&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered by the specified sort order comparer. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2353" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2353" bodyend="2355"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aa99c014d222a2da9d4590b66bad5d557" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroup&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; equalityComparer, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByGroup&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered by the specified comparison. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2362" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2362" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af934743c06018468f0c45668c6b5601e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and the default equality comparer for K, with the groups ordered descendingly by the default sort order comparer for K. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2317" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2317" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a85c7d44118e0b65e27c8a2fc94713919" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; equalityComparer, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered descendingly by the specified sort order comparer. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2326" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2326" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aa3142781f44bdbcdc0a6feae598e7d26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; equalityComparer, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered descendingly by the specified comparison. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2335" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2335" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a62c1b7b064ca81a1fb60aacc3639ff9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and the default equality comparer for K, with the groups ordered descendingly by the default sort order comparer for K. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2371" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2371" bodyend="2373"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aa651ad89b6787295988bfa7713b786bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; equalityComparer, IComparer&lt; K &gt; comparer)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>IComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered descendingly by the specified sort order comparer. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2380" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2380" bodyend="2382"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5515f77bb0eef424b60d2c753fb8b4bf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.OrderByGroupDescending&lt; K, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; equalityComparer, Comparison&lt; K &gt; comparison)</argsstring>
        <name>OrderByGroupDescending&lt; K, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>equalityComparer</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that enumerates the elements of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> ordered by grouping the elements according to the specified key selector and equality comparer, with the groups ordered descendingly by the specified comparison. </para>        </briefdescription>
        <detaileddescription>
<para>This method has O(n + k) space compexity and O(n + k log k) time complexity where n is the number of elements and k is the number of keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2389" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2389" bodyend="2391"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad280a4fbdcd322e11ba20fa29d69c683" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.Reverse&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>Reverse&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Reverse(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2396" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2396" bodyend="2400"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a1c5fa50c02093ee005d83b6d9492073f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectContext&lt;U, T, C&gt; &gt; Smooth.Slinq.Slinq.Select&lt; U, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, U &gt; selector)</argsstring>
        <name>Select&lt; U, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, U &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Select(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2405" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2405" bodyend="2407"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a640c47f5e0f0893699a9683accfe1c7f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectContext&lt;U, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Select&lt; U, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, U &gt; selector, P parameter)</argsstring>
        <name>Select&lt; U, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Select(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2412" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2412" bodyend="2414"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ae2d1a105352d0a874b4113aa6c9df0ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectOptionContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectOptionContext&lt;U, T, C&gt; &gt; Smooth.Slinq.Slinq.SelectMany&lt; U, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, Option&lt; U &gt;&gt; selector)</argsstring>
        <name>SelectMany&lt; U, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; U &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.SelectMany(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2433" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2433" bodyend="2435"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a6ec40b163224372c69b863636512f565" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectOptionContext&lt; U, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectOptionContext&lt;U, T, C, P&gt; &gt; Smooth.Slinq.Slinq.SelectMany&lt; U, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, Option&lt; U &gt;&gt; selector, P parameter)</argsstring>
        <name>SelectMany&lt; U, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; U &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.SelectMany(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2440" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2440" bodyend="2442"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a9ac362a643bba03bd22acb9e83d51101" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectSlinqContext&lt; U, UC, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectSlinqContext&lt;U, UC, T, C&gt; &gt; Smooth.Slinq.Slinq.SelectMany&lt; U, UC, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, Slinq&lt; U, UC &gt;&gt; selector)</argsstring>
        <name>SelectMany&lt; U, UC, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, UC &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.SelectMany(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2419" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2419" bodyend="2421"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5369777489207176876785f42967ea00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, SelectSlinqContext&lt; U, UC, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, SelectSlinqContext&lt;U, UC, T, C, P&gt; &gt; Smooth.Slinq.Slinq.SelectMany&lt; U, UC, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, Slinq&lt; U, UC &gt;&gt; selector, P parameter)</argsstring>
        <name>SelectMany&lt; U, UC, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, UC &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.SelectMany(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2426" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2426" bodyend="2428"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a9a1104c5a1dc720b40ad73fa63b642fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>static Int32 Smooth.Slinq.Slinq.Sum&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int32, C &gt; slinq)</argsstring>
        <name>Sum&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int32, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Sum(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2837" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2837" bodyend="2846"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ace07187be265598b806046f72d6d2874" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Int64</type>
        <definition>static Int64 Smooth.Slinq.Slinq.Sum&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Int64, C &gt; slinq)</argsstring>
        <name>Sum&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Int64, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Sum(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2853" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2853" bodyend="2862"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1add85046983068af0dd6f3c28bcbe5a05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Single</type>
        <definition>static Single Smooth.Slinq.Slinq.Sum&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Single, C &gt; slinq)</argsstring>
        <name>Sum&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Single, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Sum(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2869" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2869" bodyend="2876"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aeb1c0c2ec8cb5a168dbe6ae41be4998e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Double</type>
        <definition>static Double Smooth.Slinq.Slinq.Sum&lt; C &gt;</definition>
        <argsstring>(this Slinq&lt; Double, C &gt; slinq)</argsstring>
        <name>Sum&lt; C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; Double, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Sum(). </para>        </briefdescription>
        <detaileddescription>
<para>This operation will consume and dispose the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2883" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2883" bodyend="2890"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a82d5652b5486342456260541745a5576" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, IntContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, IntContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Take&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, int count)</argsstring>
        <name>Take&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Take(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2447" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2447" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5c556f083ed5d02e2c0c8cca52e3da21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, LinkedContext&lt; T &gt; &gt;</type>
        <definition>static Slinq&lt;T, LinkedContext&lt;T&gt; &gt; Smooth.Slinq.Slinq.TakeRight&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, int count)</argsstring>
        <name>TakeRight&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Returns a chained <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that contains up to count elements from the end of the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If count is greater than or equal to the number of elements remaining, the returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will contain all the remaining elements.</para><para>If count is less than or equal to zero, the returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2458" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2458" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ae8713cf4f7fd4eb91772647cb7e30348" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, PredicateContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, PredicateContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.TakeWhile&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, bool &gt; predicate)</argsstring>
        <name>TakeWhile&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.TakeWhile(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2471" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2471" bodyend="2473"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a29db2b440a36aec71945487ef66284fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, PredicateContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, PredicateContext&lt;T, C, P&gt; &gt; Smooth.Slinq.Slinq.TakeWhile&lt; T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, bool &gt; predicate, P parameter)</argsstring>
        <name>TakeWhile&lt; T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.TakeWhile(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2478" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2478" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ad1d9e2e61dc4748cf4e28ab82cab19d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, ConcatContext&lt;C2, T, C&gt; &gt; &gt; Smooth.Slinq.Slinq.Union&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other)</argsstring>
        <name>Union&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2499" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2499" bodyend="2501"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ab2a2d6a2152d6d531b4115015bc1270c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;T, ConcatContext&lt;C2, T, C&gt; &gt; &gt; Smooth.Slinq.Slinq.Union&lt; C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, IEqualityComparer&lt; T &gt; comparer)</argsstring>
        <name>Union&lt; C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2506" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2506" bodyend="2508"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aba75068ffe49eb661dbd8676c346df54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, ConcatContext&lt;C2, T, C&gt; &gt; &gt; Smooth.Slinq.Slinq.Union&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector)</argsstring>
        <name>Union&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2513" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2513" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a387cc0baf9152ae0a588a94d5c963454" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, ConcatContext&lt;C2, T, C&gt; &gt; &gt; Smooth.Slinq.Slinq.Union&lt; K, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, K &gt; selector, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Union&lt; K, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2520" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2520" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a567e51f6a96137b216bef5f88d7858ef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, ConcatContext&lt;C2, T, C&gt;, P&gt; &gt; Smooth.Slinq.Slinq.Union&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter)</argsstring>
        <name>Union&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2527" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2527" bodyend="2529"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a24de3fd7bd3e1b0bead1d646cc524890" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, HashSetContext&lt; K, T, ConcatContext&lt; C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, HashSetContext&lt;K, T, ConcatContext&lt;C2, T, C&gt;, P&gt; &gt; Smooth.Slinq.Slinq.Union&lt; K, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T, C2 &gt; other, DelegateFunc&lt; T, P, K &gt; selector, P parameter, IEqualityComparer&lt; K &gt; comparer)</argsstring>
        <name>Union&lt; K, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, C2 &gt;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, K &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>IEqualityComparer&lt; K &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Union(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2534" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2534" bodyend="2536"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a5d5bca2766f31acf89b9ce1d032eddf3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, PredicateContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;T, PredicateContext&lt;T, C&gt; &gt; Smooth.Slinq.Slinq.Where&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, bool &gt; predicate)</argsstring>
        <name>Where&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Where(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2485" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2485" bodyend="2487"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a909fd57f7fc91c887857798ded536e20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, PredicateContext&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;T, PredicateContext&lt;T, C, P&gt; &gt; Smooth.Slinq.Slinq.Where&lt; T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, DelegateFunc&lt; T, P, bool &gt; predicate, P parameter)</argsstring>
        <name>Where&lt; T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, P, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Where(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2492" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2492" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af3ce0e557f68dec9d612fe961bb5037a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T, T2 &gt;, ZipContext&lt; T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;Smooth.Algebraics.Tuple&lt;T, T2&gt;, ZipContext&lt;T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with)</argsstring>
        <name>Zip&lt; T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that combines elements into tuples and chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2541" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2541" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a186b766b70024b422f71875dc55a5251" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T, T2 &gt;, ZipContext&lt; T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;Smooth.Algebraics.Tuple&lt;T, T2&gt;, ZipContext&lt;T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, ZipRemoveFlags removeFlags)</argsstring>
        <name>Zip&lt; T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that combines elements into tuples and chains removal operations to the the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2548" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2548" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a716a76f4607f18426159c93e61a14a88" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipContext&lt;U, T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; U, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; T, T2, U &gt; selector)</argsstring>
        <name>Zip&lt; U, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, U &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2555" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2555" bodyend="2557"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1aa3113bdbdf33426898607f8db0838d3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipContext&lt;U, T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; U, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; T, T2, U &gt; selector, ZipRemoveFlags removeFlags)</argsstring>
        <name>Zip&lt; U, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that chains removal operations to the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2562" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2562" bodyend="2564"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1af4208f971ffe19303b811b87d525bf42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipContext&lt;U, T2, C2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; U, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; T, T2, P, U &gt; selector, P parameter)</argsstring>
        <name>Zip&lt; U, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2569" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2569" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a95c89c23deb6e3ac99a1bd7ebc423e11" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipContext&lt;U, T2, C2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.Zip&lt; U, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; T, T2, P, U &gt; selector, P parameter, ZipRemoveFlags removeFlags)</argsstring>
        <name>Zip&lt; U, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; T, T2, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Analog to Enumerable.Zip() that chains removal operations to the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2576" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2576" bodyend="2578"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ab38adf57328c921bea357d02f777fcd3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt; &gt;, ZipAllContext&lt; T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;Smooth.Algebraics.Tuple&lt;Option&lt;T&gt;, Option&lt;T2&gt; &gt;, ZipAllContext&lt;T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with)</argsstring>
        <name>ZipAll&lt; T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs into tuples and chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the enumerated tuples will contain Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> in the corresponding position.</para><para>If either of the Slinqs is empty while the other still has elements remaining, the enumerated tuples will contain None options in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2591" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2591" bodyend="2593"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a96f1629e35a72aff6e67ae42f0837ce0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt; &gt;, ZipAllContext&lt; T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;Smooth.Algebraics.Tuple&lt;Option&lt;T&gt;, Option&lt;T2&gt; &gt;, ZipAllContext&lt;T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, ZipRemoveFlags removeFlags)</argsstring>
        <name>ZipAll&lt; T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs into tuples and chains removal operations to the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the enumerated tuples will contain Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> in the corresponding position.</para><para>If either of the Slinqs is empty while the other still has elements remaining, the enumerated tuples will contain None options in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2606" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2606" bodyend="2608"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1ac9aee6fb95e31ac5ea6f71f2b4ac6437" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipAllContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipAllContext&lt;U, T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; U, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; Option&lt; T &gt;, Option&lt; T2 &gt;, U &gt; selector)</argsstring>
        <name>ZipAll&lt; U, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt;, U &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs using the supplied selector and chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the selector will be passed Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>.</para><para>If either of the Slinqs is empty while the other still has elements remaining, None options will be passed to the selector in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2621" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2621" bodyend="2623"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a94bf2717bb0ad1c3410cad695ef08850" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipAllContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipAllContext&lt;U, T2, C2, T, C&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; U, T2, C2, T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; Option&lt; T &gt;, Option&lt; T2 &gt;, U &gt; selector, ZipRemoveFlags removeFlags)</argsstring>
        <name>ZipAll&lt; U, T2, C2, T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt;, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs using the supplied selector and chains removal operations to the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the selector will be passed Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>.</para><para>If either of the Slinqs is empty while the other still has elements remaining, None options will be passed to the selector in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2636" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2636" bodyend="2638"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a7fb663e93232ac56371fa490710ac961" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipAllContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipAllContext&lt;U, T2, C2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; U, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; Option&lt; T &gt;, Option&lt; T2 &gt;, P, U &gt; selector, P parameter)</argsstring>
        <name>ZipAll&lt; U, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt;, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs using the supplied selector and chains removal operations to the left <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the selector will be passed Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>.</para><para>If either of the Slinqs is empty while the other still has elements remaining, None options will be passed to the selector in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2651" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2651" bodyend="2653"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1afad0a6fc82e8a2da5e8e828c0190d078" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; U, ZipAllContext&lt; U, T2, C2, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, P &gt; &gt;</type>
        <definition>static Slinq&lt;U, ZipAllContext&lt;U, T2, C2, T, C, P&gt; &gt; Smooth.Slinq.Slinq.ZipAll&lt; U, T2, C2, T, C, P &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq, Slinq&lt; T2, C2 &gt; with, DelegateFunc&lt; Option&lt; T &gt;, Option&lt; T2 &gt;, P, U &gt; selector, P parameter, ZipRemoveFlags removeFlags)</argsstring>
        <name>ZipAll&lt; U, T2, C2, T, C, P &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <param>
          <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T2, C2 &gt;</type>
          <declname>with</declname>
        </param>
        <param>
          <type>DelegateFunc&lt; <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;, <ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T2 &gt;, P, U &gt;</type>
          <declname>selector</declname>
        </param>
        <param>
          <type>P</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="namespace_smooth_1_1_slinq_1_1_context_1a133946902b966cf7981c292747ea0205" kindref="member">ZipRemoveFlags</ref></type>
          <declname>removeFlags</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> that combines the corresponding elements from the supplied Slinqs using the supplied selector and chains removal operations to the specified Slinq(s). </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> will continue enumerating until it reaches the end of the longer of the supplied Slinqs.</para><para>While a <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> has elements remaining, the selector will be passed Some options containing the corresponding elements from the <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>.</para><para>If either of the Slinqs is empty while the other still has elements remaining, None options will be passed to the selector in place of the shorter <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&apos;s element until the enumeration is complete.</para><para>Removal operations will not be chained to an empty <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2666" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2666" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_slinq_1a4e98308da36cff37b0feb9c29e29c071" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; <ref refid="class_smooth_1_1_algebraics_1_1_tuple" kindref="compound">Smooth.Algebraics.Tuple</ref>&lt; T, int &gt;, ZipContext&lt; int, FuncContext&lt; int, int &gt;, T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>static Slinq&lt;Smooth.Algebraics.Tuple&lt;T, int&gt;, ZipContext&lt;int, FuncContext&lt;int, int&gt;, T, C&gt; &gt; Smooth.Slinq.Slinq.ZipWithIndex&lt; T, C &gt;</definition>
        <argsstring>(this Slinq&lt; T, C &gt; slinq)</argsstring>
        <name>ZipWithIndex&lt; T, C &gt;</name>
        <param>
          <type>this <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref>&lt; T, <ref refid="_discovery_info_8cs_1aa4534f4ef35a5b44e916abb50aa15070a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;</type>
          <declname>slinq</declname>
        </param>
        <briefdescription>
<para>Zips the specified <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> with a zero-based index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="2673" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="2673" bodyend="2675"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides methods for the creation of chained Slinqs as well as various type specific <ref refid="class_smooth_1_1_slinq_1_1_slinq" kindref="compound">Slinq</ref> comprehensions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" line="1777" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Slinq.cs" bodystart="1777" bodyend="2910"/>
    <listofallmembers>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a7e2001cd60a94129e0814952a2b089e8" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AggregateRunning&lt; U, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af921e014efd3b33d59132c3ef3b95e83" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AggregateRunning&lt; U, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1abea354194b6d472f75464999e2e6cb2a" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Average&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a41f2099ac49a9f8d3cd34360972842d5" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Average&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af130672e4d2a701f61a27ba059279fa6" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Average&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a8a2c39a99c8cd793c63a8ee758096b73" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Average&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1abb04ec76fd9d3e940c336c852c3be611" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AverageOrNone&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1addd0021c3182b03968155eb01adb4422" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AverageOrNone&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ac663a1d2cb20aea4745bb1e5a0695baf" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AverageOrNone&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a553a5ac28447a6730c4bd5badbe51441" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>AverageOrNone&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1afe7acd97132bcc565c5cd341c0e56b1e" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Concat&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aa844468bfe83d0e3ea05fc7f34af1863" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>DefaultIfEmpty&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a37882d92f0e1a3d6a4e27d45c4c61bf5" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>DefaultIfEmpty&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a7b98df980379db31e2776ff0b4cdad4b" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a20d8b7ec4cf96db1cbf7be5c0ac5d727" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1abda5783cdd86403556b54fde329b1e4f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aee3a50c87d1e228ea6fe38a300da05a2" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af68935ba55f1645c10aedc024f9fdb41" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af083d23f5877ab8ff53ff53e6e0532ec" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Distinct&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a31ca5253e2233a9f1dcb63c096211b74" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a6f5467b8404b00de7846111e90025aa5" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a47f9d2d344df90704982158967b418e2" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a4747044f00348604f53663ce599acb6f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a1ab9bca999929aa08e745f7bca4a203c" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a801a2c73e3e17c8c4ccb28d6bb13f4cb" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Except&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1acd8ba70a5559bcac545e9a7a1c217496" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Flatten&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a6f891bb91c0c1edaf15c2ed813e631f9" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Flatten&lt; T, C1, C2 &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a7d785d2c35487e02898b4f6a894b1820" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ac7daf1cd9165f39825e4a7c94edaa299" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a53632d486b48496bca763b8fc0bb9cbf" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a81f7df48a7924bf30eeebe644fd465e4" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ac304060efd9c3dd3ce85058f65405430" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupJoin&lt; U, K, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a09ed102ff5316cf39b8e56a84a8fba42" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupJoin&lt; U, K, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1afdb16f01a5163dc9481468ad59cef9a0" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1abd3a1ed494fe9ce0c304eaa18eb1f1c8" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>GroupJoin&lt; U, K, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad1d39f81e043aeba2830221d51bc6d04" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a374b1f2a969b381f87e6167d80d59ed4" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1acd0bdf063210016c78f6ad2c98cd1659" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a84501982acfa12791fffab8e20af2633" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aeac8aae900236dc7529cb190107e3f17" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aebf950d6084d5571e6908b4cd741f1ee" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Intersect&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aae696b1acef9c9760f0d80fa97cea780" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Join&lt; U, K, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a1aca0f4d53fc0e99ee0e950b578a13e2" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Join&lt; U, K, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad37d0bdbec4b235eed62924a9ce0577a" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Join&lt; U, K, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5da32ce52220d8d795ea8e349e36a9a7" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Join&lt; U, K, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a01b501aaeecc21946455aa66a039c002" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a99bc8d1b1da65024713f2507a2cee93b" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ab2590a6638b0c5eadaef1eca1e0d63ad" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a8d4dcfec79d1d366cf9e0bfc1e240506" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ac58256f1a767d26522c993c9037ad0c6" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ae6bb2642785411fee352426109d5aa3a" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1adea2399473617860aae56333d5b687f8" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1acb4bd12c1551795b9ed5d14f50714303" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a3e1edd76c8f3fa79e7dc0def8aae97c4" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ae6d044719c5c0765cdd8e3254013e4e9" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a3fe68af6ddf5818adcea040c6b2a9ce0" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad96cb8a8d67463da2a0237d3f57c2253" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderBy&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a9aea463228089a0bacca74b0d70db555" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a2f76914d53912f138053a3544dfc4f4f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a70a246d23032dd40a34fd40570df90be" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ab24b63936e85b2f2f0ef1286777cfe43" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5be21338054bdcab1732116a3c83f356" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad7e40871cee9769de6ac890419eb39d7" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a096f10a1d1bee28250ea090df9e6891b" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ada450e4d99a61073f1c58e0ff125a878" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a1056f5f55b78deb35895aa4f2056bda4" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByDescending&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a841b70ec0334e4cd14a2ce49a2c246d9" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a833de96bd27bbe89a2c085aee5ae7eb3" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a940e30ae51e0cd485c1353738ef49e06" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a966ba0ea21e081045d55cf600f9dc2e1" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a0ab1066ef9e54af86d4427f6508d6d2d" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aa99c014d222a2da9d4590b66bad5d557" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroup&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af934743c06018468f0c45668c6b5601e" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a85c7d44118e0b65e27c8a2fc94713919" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aa3142781f44bdbcdc0a6feae598e7d26" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a62c1b7b064ca81a1fb60aacc3639ff9b" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aa651ad89b6787295988bfa7713b786bb" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5515f77bb0eef424b60d2c753fb8b4bf" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>OrderByGroupDescending&lt; K, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad280a4fbdcd322e11ba20fa29d69c683" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Reverse&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a1c5fa50c02093ee005d83b6d9492073f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Select&lt; U, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a640c47f5e0f0893699a9683accfe1c7f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Select&lt; U, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ae2d1a105352d0a874b4113aa6c9df0ec" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>SelectMany&lt; U, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a6ec40b163224372c69b863636512f565" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>SelectMany&lt; U, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a9ac362a643bba03bd22acb9e83d51101" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>SelectMany&lt; U, UC, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5369777489207176876785f42967ea00" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>SelectMany&lt; U, UC, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a9a1104c5a1dc720b40ad73fa63b642fe" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Sum&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ace07187be265598b806046f72d6d2874" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Sum&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1add85046983068af0dd6f3c28bcbe5a05" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Sum&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aeb1c0c2ec8cb5a168dbe6ae41be4998e" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Sum&lt; C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a82d5652b5486342456260541745a5576" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Take&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5c556f083ed5d02e2c0c8cca52e3da21" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>TakeRight&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ae8713cf4f7fd4eb91772647cb7e30348" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>TakeWhile&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a29db2b440a36aec71945487ef66284fa" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>TakeWhile&lt; T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ad1d9e2e61dc4748cf4e28ab82cab19d5" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ab2a2d6a2152d6d531b4115015bc1270c" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aba75068ffe49eb661dbd8676c346df54" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a387cc0baf9152ae0a588a94d5c963454" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; K, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a567e51f6a96137b216bef5f88d7858ef" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a24de3fd7bd3e1b0bead1d646cc524890" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Union&lt; K, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a5d5bca2766f31acf89b9ce1d032eddf3" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Where&lt; T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a909fd57f7fc91c887857798ded536e20" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Where&lt; T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af3ce0e557f68dec9d612fe961bb5037a" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a186b766b70024b422f71875dc55a5251" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a716a76f4607f18426159c93e61a14a88" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; U, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1aa3113bdbdf33426898607f8db0838d3f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; U, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1af4208f971ffe19303b811b87d525bf42" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; U, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a95c89c23deb6e3ac99a1bd7ebc423e11" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>Zip&lt; U, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ab38adf57328c921bea357d02f777fcd3" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a96f1629e35a72aff6e67ae42f0837ce0" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1ac9aee6fb95e31ac5ea6f71f2b4ac6437" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; U, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a94bf2717bb0ad1c3410cad695ef08850" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; U, T2, C2, T, C &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a7fb663e93232ac56371fa490710ac961" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; U, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1afad0a6fc82e8a2da5e8e828c0190d078" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipAll&lt; U, T2, C2, T, C, P &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_slinq_1a4e98308da36cff37b0feb9c29e29c071" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Slinq</scope><name>ZipWithIndex&lt; T, C &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
