<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="_either_8cs" kind="file">
    <compoundname>Either.cs</compoundname>
    <innerclass refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" prot="public">Smooth::Algebraics::Either&lt; L, R &gt;</innerclass>
    <innernamespace refid="namespace_smooth_1_1_algebraics">Smooth::Algebraics</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_celestial_body_8cs_1ac9eb0319ef2a2099d69ed9e5dcbfcb6aa8045a0a6c688b0635e3caccc408a1446" kindref="member">System.Collections.Generic</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Smooth.Collections;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Smooth.Delegates;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespace_smooth_1_1_algebraics" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Smooth.Algebraics<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>[System.Serializable]</highlight></codeline>
<codeline lineno="11" refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Either&lt;L,<sp/><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>&gt;<sp/>:<sp/>IComparable&lt;Either&lt;L,<sp/>R&gt;&gt;,<sp/>IEquatable&lt;Either&lt;L,<sp/>R&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>readonly<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLeft;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>readonly<sp/>L<sp/>leftValue;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref><sp/>rightValue;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRight<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!isLeft;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;L&gt;</ref><sp/>leftOption<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;L&gt;</ref>(leftValue)<sp/>:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;L&gt;</ref>();<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;R&gt;</ref><sp/>rightOption<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;R&gt;</ref>()<sp/>:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option&lt;R&gt;</ref>(rightValue);<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/><ref refid="_menu_navigation_8cs_1a0685ce88c977950be950e90b8786b4eea945d5e233cf7d6240f6b783b36a374ff" kindref="member">Left</ref>(L<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>value,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">(<ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/><ref refid="_menu_navigation_8cs_1a0685ce88c977950be950e90b8786b4eea92b09c7c48c520c3c55e497875da437c" kindref="member">Right</ref>(<ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">(L),<sp/>value);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Either(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLeft,<sp/>L<sp/>leftValue,<sp/><ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref><sp/>rightValue)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.isLeft<sp/>=<sp/>isLeft;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.leftValue<sp/>=<sp/>leftValue;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.rightValue<sp/>=<sp/>rightValue;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>V<sp/>Cata&lt;V&gt;(DelegateFunc&lt;L,<sp/>V&gt;<sp/>leftFunc,<sp/>DelegateFunc&lt;R,<sp/>V&gt;<sp/>rightFunc)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>leftFunc(leftValue)<sp/>:<sp/>rightFunc(rightValue);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>V<sp/>Cata&lt;V,<sp/>P&gt;(DelegateFunc&lt;L,<sp/>P,<sp/>V&gt;<sp/>leftFunc,<sp/>P<sp/>p,<sp/>DelegateFunc&lt;R,<sp/>V&gt;<sp/>rightFunc)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>leftFunc(leftValue,<sp/>p)<sp/>:<sp/>rightFunc(rightValue);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>V<sp/>Cata&lt;V,<sp/>P2&gt;(DelegateFunc&lt;L,<sp/>V&gt;<sp/>leftFunc,<sp/>DelegateFunc&lt;R,<sp/>P2,<sp/>V&gt;<sp/>rightFunc,<sp/>P2<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>leftFunc(leftValue)<sp/>:<sp/>rightFunc(rightValue,<sp/>p2);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>V<sp/>Cata&lt;V,<sp/>P,<sp/>P2&gt;(DelegateFunc&lt;L,<sp/>P,<sp/>V&gt;<sp/>leftFunc,<sp/>P<sp/>p,<sp/>DelegateFunc&lt;R,<sp/>P2,<sp/>V&gt;<sp/>rightFunc,<sp/>P2<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>leftFunc(leftValue,<sp/>p)<sp/>:<sp/>rightFunc(rightValue,<sp/>p2);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForEach(DelegateAction&lt;L&gt;<sp/>leftAction,<sp/>DelegateAction&lt;R&gt;<sp/>rightAction)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft)<sp/>leftAction(leftValue);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rightAction(rightValue);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForEach&lt;P&gt;(DelegateAction&lt;L,<sp/>P&gt;<sp/>leftAction,<sp/>P<sp/>p,<sp/>DelegateAction&lt;R&gt;<sp/>rightAction)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft)<sp/>leftAction(leftValue,<sp/>p);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rightAction(rightValue);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForEach&lt;P2&gt;(DelegateAction&lt;L&gt;<sp/>leftAction,<sp/>DelegateAction&lt;R,<sp/>P2&gt;<sp/>rightAction,<sp/>P2<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft)<sp/>leftAction(leftValue);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rightAction(rightValue,<sp/>p2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForEach&lt;P,<sp/>P2&gt;(DelegateAction&lt;L,<sp/>P&gt;<sp/>leftAction,<sp/>P<sp/>p,<sp/>DelegateAction&lt;R,<sp/>P2&gt;<sp/>rightAction,<sp/>P2<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft)<sp/>leftAction(leftValue,<sp/>p);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rightAction(rightValue,<sp/>p2);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o<sp/>is<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>&amp;&amp;<sp/>this.Equals((<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref>)<sp/>o);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>other.isLeft<sp/>&amp;&amp;<sp/>Smooth.Collections.EqualityComparer&lt;L&gt;.Default.Equals(leftValue,<sp/>other.leftValue)<sp/>:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!other.<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1ab6ffd3417ac8bc989ffb9eef22d1a80c" kindref="member">isLeft</ref><sp/>&amp;&amp;<sp/>Smooth.Collections.EqualityComparer&lt;<ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>&gt;.Default.Equals(rightValue,<sp/>other.<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4_1a8bc05c2aa3815505bef86565c020ccf7" kindref="member">rightValue</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetHashCode()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>Smooth.Collections.EqualityComparer&lt;L&gt;.Default.GetHashCode(leftValue)<sp/>:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Smooth.Collections.EqualityComparer&lt;<ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>&gt;.Default.GetHashCode(rightValue);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CompareTo(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/>(other.isLeft<sp/>?<sp/>Smooth.Collections.Comparer&lt;L&gt;.Default.Compare(leftValue,<sp/>other.leftValue)<sp/>:<sp/>-1)<sp/>:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.isLeft<sp/>?<sp/>1<sp/>:<sp/>Smooth.Collections.Comparer&lt;<ref refid="_color_values_8cs_1ae7dd471f9ad36b81822ddf3635effce2ae1e1d3d40573127e9ee0480caf1283d6" kindref="member">R</ref>&gt;.Default.Compare(rightValue,<sp/>other.rightValue);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.Equals(rhs);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!lhs.Equals(rhs);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;<sp/>(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.CompareTo(rhs)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(Either&lt;L,<sp/>R&gt;<sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.CompareTo(rhs)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(<ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.CompareTo(rhs)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(Either&lt;L,<sp/>R&gt;<sp/>lhs,<sp/><ref refid="struct_smooth_1_1_algebraics_1_1_either_3_01_l_00_01_r_01_4" kindref="compound">Either&lt;L, R&gt;</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.CompareTo(rhs)<sp/>&lt;=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ToString()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLeft<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[Left:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>leftValue<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[Right:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rightValue<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Algebraics/Either.cs"/>
  </compounddef>
</doxygen>
