<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_smooth_1_1_collections_1_1_i_list_extensions" kind="class" prot="public">
    <compoundname>Smooth::Collections::IListExtensions</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_smooth_1_1_collections_1_1_i_list_extensions_1aaa9ce8b5c474e0c796a770825f49a8c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Smooth.Collections.IListExtensions.InsertionSort&lt; T &gt;</definition>
        <argsstring>(this IList&lt; T &gt; ts)</argsstring>
        <name>InsertionSort&lt; T &gt;</name>
        <param>
          <type>this IList&lt; T &gt;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using an insertion sort algorithm and the default sort comparer for T. </para>        </briefdescription>
        <detaileddescription>
<para>Insertion sort is a O(n²) time complexity algorithm and should not be used on arbitrary lists. However, it has a best case time complexity of O(n) for lists that are already sorted and is quite fast when used on nearly sorted input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="48" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_collections_1_1_i_list_extensions_1a1127e315a570aa4de73f5cb6dc96f275" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Smooth.Collections.IListExtensions.InsertionSort&lt; T &gt;</definition>
        <argsstring>(this IList&lt; T &gt; ts, IComparer&lt; T &gt; comparer)</argsstring>
        <name>InsertionSort&lt; T &gt;</name>
        <param>
          <type>this IList&lt; T &gt;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>IComparer&lt; T &gt;</type>
          <declname>comparer</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using an insertion sort algorithm and the specified comparer. </para>        </briefdescription>
        <detaileddescription>
<para>Insertion sort is a O(n²) time complexity algorithm and should not be used on arbitrary lists. However, it has a best case time complexity of O(n) for lists that are already sorted and is quite fast when used on nearly sorted input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="59" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_collections_1_1_i_list_extensions_1a110ec071318fd4c2ea210cc0ed17b8a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Smooth.Collections.IListExtensions.InsertionSort&lt; T &gt;</definition>
        <argsstring>(this IList&lt; T &gt; ts, Comparison&lt; T &gt; comparison)</argsstring>
        <name>InsertionSort&lt; T &gt;</name>
        <param>
          <type>this IList&lt; T &gt;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using an insertion sort algorithm and the specified comparison. </para>        </briefdescription>
        <detaileddescription>
<para>Insertion sort is a O(n²) time complexity algorithm and should not be used on arbitrary lists. However, it has a best case time complexity of O(n) for lists that are already sorted and is quite fast when used on nearly sorted input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="70" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="70" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_collections_1_1_i_list_extensions_1a854bd125346337ca79aa33b189e2f309" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smooth_1_1_algebraics_1_1_option" kindref="compound">Option</ref>&lt; T &gt;</type>
        <definition>static Option&lt;T&gt; Smooth.Collections.IListExtensions.Random&lt; T &gt;</definition>
        <argsstring>(this IList&lt; T &gt; list)</argsstring>
        <name>Random&lt; T &gt;</name>
        <param>
          <type>this IList&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>If the specified list is empty, returns an empty option; otherwise, returns an option containing a random element from the specified list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="19" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_collections_1_1_i_list_extensions_1afebb5f66d76013d2f601ca66663eb51c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Smooth.Collections.IListExtensions.Shuffle&lt; T &gt;</definition>
        <argsstring>(this IList&lt; T &gt; ts)</argsstring>
        <name>Shuffle&lt; T &gt;</name>
        <param>
          <type>this IList&lt; T &gt;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Shuffles the element order of the specified list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="26" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="26" bodyend="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extension methods for IList&lt;&gt;s. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" line="12" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Collections/IListExtensions.cs" bodystart="12" bodyend="84"/>
    <listofallmembers>
      <member refid="class_smooth_1_1_collections_1_1_i_list_extensions_1aaa9ce8b5c474e0c796a770825f49a8c7" prot="public" virt="non-virtual"><scope>Smooth::Collections::IListExtensions</scope><name>InsertionSort&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_collections_1_1_i_list_extensions_1a1127e315a570aa4de73f5cb6dc96f275" prot="public" virt="non-virtual"><scope>Smooth::Collections::IListExtensions</scope><name>InsertionSort&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_collections_1_1_i_list_extensions_1a110ec071318fd4c2ea210cc0ed17b8a7" prot="public" virt="non-virtual"><scope>Smooth::Collections::IListExtensions</scope><name>InsertionSort&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_collections_1_1_i_list_extensions_1a854bd125346337ca79aa33b189e2f309" prot="public" virt="non-virtual"><scope>Smooth::Collections::IListExtensions</scope><name>Random&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_collections_1_1_i_list_extensions_1afebb5f66d76013d2f601ca66663eb51c" prot="public" virt="non-virtual"><scope>Smooth::Collections::IListExtensions</scope><name>Shuffle&lt; T &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
