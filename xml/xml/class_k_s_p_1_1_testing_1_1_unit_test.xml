<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_k_s_p_1_1_testing_1_1_unit_test" kind="class" prot="public">
    <compoundname>KSP::Testing::UnitTest</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_s_p_1_1_testing_1_1_unit_test_1a0a8ad92743980ea7b210a8c697f1e614" prot="public" static="no" mutable="no">
        <type>List&lt; <ref refid="class_k_s_p_1_1_testing_1_1_test_state" kindref="compound">TestState</ref> &gt;</type>
        <definition>List&lt;TestState&gt; KSP.Testing.UnitTest.Results</definition>
        <argsstring></argsstring>
        <name>Results</name>
        <initializer>= new List&lt;<ref refid="class_k_s_p_1_1_testing_1_1_test_state" kindref="compound">TestState</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="15" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_s_p_1_1_testing_1_1_unit_test_1a03bd0026f3cb102e4a26bb2badf6a852" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void KSP.Testing.UnitTest.TestStartUp</definition>
        <argsstring>()</argsstring>
        <name>TestStartUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="20" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_s_p_1_1_testing_1_1_unit_test_1a7f88041bc1482c0e29a1e26d7639f9d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void KSP.Testing.UnitTest.TestTearDown</definition>
        <argsstring>()</argsstring>
        <name>TestTearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="22" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_k_s_p_1_1_testing_1_1_unit_test_1adc24656778be9862c1aea991cdf4d5f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KSP.Testing.UnitTest.UnitTest</definition>
        <argsstring>()</argsstring>
        <name>UnitTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="18" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="18" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_s_p_1_1_testing_1_1_unit_test_1a52d800fa27901bfc23bca06983fe568c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KSP.Testing.UnitTest.assertEquals</definition>
        <argsstring>(string testname, object value, object shouldbe)</argsstring>
        <name>assertEquals</name>
        <param>
          <type>string</type>
          <declname>testname</declname>
        </param>
        <param>
          <type>object</type>
          <declname>value</declname>
        </param>
        <param>
          <type>object</type>
          <declname>shouldbe</declname>
        </param>
        <briefdescription>
<para>Make sure that value and object are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testname</parametername>
</parameternamelist>
<parameterdescription>
<para>Displayed name of the test</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be tested</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shouldbe</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected value</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; Vector3ds are a damn nightmare.</para><para>&lt; As for everything else, just use the .Equals() method. </para>        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="31" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="31" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-func">
      <memberdef kind="function" id="class_k_s_p_1_1_testing_1_1_unit_test_1a02b5ccc314e698f5493ee89d2bf6bbab" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IEnumerable&lt; <ref refid="class_k_s_p_1_1_testing_1_1_test_state" kindref="compound">TestState</ref> &gt;</type>
        <definition>IEnumerable&lt;TestState&gt; KSP.Testing.UnitTest.PerformTest</definition>
        <argsstring>()</argsstring>
        <name>PerformTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Run the Start Up method in the test.</para><para>&lt; Loop through each method to see if they have the [<ref refid="class_k_s_p_1_1_testing_1_1_test_info" kindref="compound">TestInfo</ref>] attribute.</para><para>&lt; Check signature (void TEST_DERP005()) </para>        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="73" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="73" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>See /KSPExternalModules/UnitTests for a sample <ref refid="class_k_s_p_1_1_testing_1_1_unit_test" kindref="compound">UnitTest</ref>. Output is in the log. </para>    </briefdescription>
    <detaileddescription>
<para>Inherit this class for each class and create methods with the <ref refid="class_k_s_p_1_1_testing_1_1_test_info" kindref="compound">TestInfo</ref> attribute for each individual test. It&apos;s crappy, but since NUnit doesn&apos;t like Unity, this&apos;ll do for now. </para>    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" line="14" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Unit Testing Scripts/UnitTest.cs" bodystart="13" bodyend="149"/>
    <listofallmembers>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1a52d800fa27901bfc23bca06983fe568c" prot="protected" virt="non-virtual"><scope>KSP::Testing::UnitTest</scope><name>assertEquals</name></member>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1a02b5ccc314e698f5493ee89d2bf6bbab" prot="package" virt="non-virtual"><scope>KSP::Testing::UnitTest</scope><name>PerformTest</name></member>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1a0a8ad92743980ea7b210a8c697f1e614" prot="public" virt="non-virtual"><scope>KSP::Testing::UnitTest</scope><name>Results</name></member>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1a03bd0026f3cb102e4a26bb2badf6a852" prot="public" virt="virtual"><scope>KSP::Testing::UnitTest</scope><name>TestStartUp</name></member>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1a7f88041bc1482c0e29a1e26d7639f9d7" prot="public" virt="virtual"><scope>KSP::Testing::UnitTest</scope><name>TestTearDown</name></member>
      <member refid="class_k_s_p_1_1_testing_1_1_unit_test_1adc24656778be9862c1aea991cdf4d5f6" prot="public" virt="non-virtual"><scope>KSP::Testing::UnitTest</scope><name>UnitTest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
