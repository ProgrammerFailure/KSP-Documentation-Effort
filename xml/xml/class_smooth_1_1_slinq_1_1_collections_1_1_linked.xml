<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_smooth_1_1_slinq_1_1_collections_1_1_linked" kind="class" prot="public">
    <compoundname>Smooth::Slinq::Collections::Linked</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1a0912b08e3320fcb2897bb745bcd0f3db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; K, T &gt;</type>
        <definition>static LinkedHeadTail&lt;K, T&gt; Smooth.Slinq.Collections.Linked.InsertionSort&lt; K, T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; K, T &gt; input, Comparison&lt; K &gt; comparison, bool ascending)</argsstring>
        <name>InsertionSort&lt; K, T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; K, T &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using the specified comparison and ordering using an insertion sort algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="1076" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="1076" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1a916681029987b25bb81333f9317168da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; T &gt;</type>
        <definition>static LinkedHeadTail&lt;T&gt; Smooth.Slinq.Collections.Linked.InsertionSort&lt; T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; T &gt; input, Comparison&lt; T &gt; comparison, bool ascending)</argsstring>
        <name>InsertionSort&lt; T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; T &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using the specified comparison and ordering using an insertion sort algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="1021" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="1021" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1af83a9840a1361adf827848bd447a0619" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; K, T &gt;</type>
        <definition>static LinkedHeadTail&lt;K, T&gt; Smooth.Slinq.Collections.Linked.Merge&lt; K, T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; K, T &gt; left, LinkedHeadTail&lt; K, T &gt; right, Comparison&lt; K &gt; comparison, bool ascending)</argsstring>
        <name>Merge&lt; K, T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; K, T &gt;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>LinkedHeadTail&lt; K, T &gt;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Merges the specified sorted lists using the specified comparison and ordering. Elements from the left list will appear before elements from the right on equal comparisons. </para>        </briefdescription>
        <detaileddescription>
<para>The specified lists must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified lists and any variables containing their nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="957" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="957" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1adeb2a12bf88a7002b681a792fdb5377f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; T &gt;</type>
        <definition>static LinkedHeadTail&lt;T&gt; Smooth.Slinq.Collections.Linked.Merge&lt; T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; T &gt; left, LinkedHeadTail&lt; T &gt; right, Comparison&lt; T &gt; comparison, bool ascending)</argsstring>
        <name>Merge&lt; T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; T &gt;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>LinkedHeadTail&lt; T &gt;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Merges the specified sorted lists using the specified comparison and ordering. Elements from the left list will appear before elements from the right on equal comparisons. </para>        </briefdescription>
        <detaileddescription>
<para>The specified lists must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified lists and any variables containing their nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="893" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="893" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1af639e11523f927d050102404e10f8786" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; K, T &gt;</type>
        <definition>static LinkedHeadTail&lt;K, T&gt; Smooth.Slinq.Collections.Linked.Reverse&lt; K, T &gt;</definition>
        <argsstring>(this LinkedHeadTail&lt; K, T &gt; list)</argsstring>
        <name>Reverse&lt; K, T &gt;</name>
        <param>
          <type>this LinkedHeadTail&lt; K, T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Reverses the specified list. </para>        </briefdescription>
        <detaileddescription>
<para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="696" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="696" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1ae891b49a84c97a4b9c638d2131daaf9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; T &gt;</type>
        <definition>static LinkedHeadTail&lt;T&gt; Smooth.Slinq.Collections.Linked.Reverse&lt; T &gt;</definition>
        <argsstring>(this LinkedHeadTail&lt; T &gt; list)</argsstring>
        <name>Reverse&lt; T &gt;</name>
        <param>
          <type>this LinkedHeadTail&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Reverses the specified list. </para>        </briefdescription>
        <detaileddescription>
<para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="675" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="675" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1adc7243fe76eebfcc0f309eeb940f1727" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; K, T &gt;</type>
        <definition>static LinkedHeadTail&lt;K, T&gt; Smooth.Slinq.Collections.Linked.Sort&lt; K, T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; K, T &gt; input, Comparison&lt; K &gt; comparison, bool ascending)</argsstring>
        <name>Sort&lt; K, T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; K, T &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>Comparison&lt; K &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using the specified comparison and ordering. </para>        </briefdescription>
        <detaileddescription>
<para>This method uses an introspective merge sort algorithm that will optimally sort rather than split lists with 3 or fewer nodes.</para><para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="807" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="807" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1aeca103a6ece46479c7315e3c78df3da2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkedHeadTail&lt; T &gt;</type>
        <definition>static LinkedHeadTail&lt;T&gt; Smooth.Slinq.Collections.Linked.Sort&lt; T &gt;</definition>
        <argsstring>(LinkedHeadTail&lt; T &gt; input, Comparison&lt; T &gt; comparison, bool ascending)</argsstring>
        <name>Sort&lt; T &gt;</name>
        <param>
          <type>LinkedHeadTail&lt; T &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>Comparison&lt; T &gt;</type>
          <declname>comparison</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
        </param>
        <briefdescription>
<para>Sorts the specified list using the specified comparison and ordering. </para>        </briefdescription>
        <detaileddescription>
<para>This method uses an introspective merge sort algorithm that will optimally sort rather than split lists with 3 or fewer nodes.</para><para>The specified list must be well formed when calling this method or the program will enter an invalid state, resulting in unspecified behaviour.</para><para>Calling this method will invalidate the specified list and any variables containing its nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="719" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="719" bodyend="796"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extension methods for Linked&lt;&gt; and LinkedHeadTail&lt;&gt;. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" line="666" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/Util Scripts/SmoothFoundations/Slinq/Collections/Linked.cs" bodystart="666" bodyend="1123"/>
    <listofallmembers>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1a0912b08e3320fcb2897bb745bcd0f3db" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>InsertionSort&lt; K, T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1a916681029987b25bb81333f9317168da" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>InsertionSort&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1af83a9840a1361adf827848bd447a0619" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Merge&lt; K, T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1adeb2a12bf88a7002b681a792fdb5377f" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Merge&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1af639e11523f927d050102404e10f8786" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Reverse&lt; K, T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1ae891b49a84c97a4b9c638d2131daaf9c" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Reverse&lt; T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1adc7243fe76eebfcc0f309eeb940f1727" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Sort&lt; K, T &gt;</name></member>
      <member refid="class_smooth_1_1_slinq_1_1_collections_1_1_linked_1aeca103a6ece46479c7315e3c78df3da2" prot="public" virt="non-virtual"><scope>Smooth::Slinq::Collections::Linked</scope><name>Sort&lt; T &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
