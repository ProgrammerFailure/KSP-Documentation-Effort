<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_steamworks_1_1_steam_game_server_networking" kind="class" prot="public">
    <compoundname>Steamworks::SteamGameServerNetworking</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1aa6f1b5c53472141a7b892070eb981cdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.AcceptP2PSessionWithUser</definition>
        <argsstring>(CSteamID steamIDRemote)</argsstring>
        <name>AcceptP2PSessionWithUser</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDRemote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_steamworks_1_1_steam_game_server_networking_1aa6f1b5c53472141a7b892070eb981cdf" kindref="member">AcceptP2PSessionWithUser()</ref> should only be called in response to a <ref refid="struct_steamworks_1_1_p2_p_session_request__t" kindref="compound">P2PSessionRequest_t</ref> callback</para><para><ref refid="struct_steamworks_1_1_p2_p_session_request__t" kindref="compound">P2PSessionRequest_t</ref> will be posted if another user tries to send you a packet that you haven&apos;t talked to yet</para><para>if you don&apos;t want to talk to the user, just ignore the request</para><para>if the user continues to send you packets, another <ref refid="struct_steamworks_1_1_p2_p_session_request__t" kindref="compound">P2PSessionRequest_t</ref> will be posted periodically</para><para>this may be called multiple times for a single user</para><para>(if you&apos;ve called <ref refid="class_steamworks_1_1_steam_game_server_networking_1ad26065546f6f916a3ba3114301e0fbd8" kindref="member">SendP2PPacket()</ref> on the other user, this implicitly accepts the session request)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="60" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a502611a1c7f7e110275c313c87d8c58b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.AllowP2PPacketRelay</definition>
        <argsstring>(bool bAllow)</argsstring>
        <name>AllowP2PPacketRelay</name>
        <param>
          <type>bool</type>
          <declname>bAllow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow P2P connections to fall back to being relayed through the Steam servers if a direct connection</para><para>or NAT-traversal cannot be established. Only applies to connections created after setting this value,</para><para>or to existing connections that need to automatically reconnect after this value is set.</para><para>P2P packet relay is allowed by default</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="100" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a6bdfd28622b0381a29fe3226a94cbf39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.CloseP2PChannelWithUser</definition>
        <argsstring>(CSteamID steamIDRemote, int nChannel)</argsstring>
        <name>CloseP2PChannelWithUser</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDRemote</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nChannel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>call <ref refid="class_steamworks_1_1_steam_game_server_networking_1a6bdfd28622b0381a29fe3226a94cbf39" kindref="member">CloseP2PChannelWithUser()</ref> when you&apos;re done talking to a user on a specific channel. Once all channels</para><para>open channels to a user have been closed, the open session to the user will be closed and new data from this</para><para>user will trigger a <ref refid="struct_steamworks_1_1_p2_p_session_request__t" kindref="compound">P2PSessionRequest_t</ref> callback</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="79" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a009a2713b4af64df3c890bc138d1d44b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.CloseP2PSessionWithUser</definition>
        <argsstring>(CSteamID steamIDRemote)</argsstring>
        <name>CloseP2PSessionWithUser</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDRemote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>call <ref refid="class_steamworks_1_1_steam_game_server_networking_1a009a2713b4af64df3c890bc138d1d44b" kindref="member">CloseP2PSessionWithUser()</ref> when you&apos;re done talking to a user, will free up resources under-the-hood</para><para>if the remote user tries to send data to you again, another <ref refid="struct_steamworks_1_1_p2_p_session_request__t" kindref="compound">P2PSessionRequest_t</ref> callback will be posted</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="69" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a3ee8f01dfcba6f683a3bb3110a94ae91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
        <definition>static SNetSocket_t Steamworks.SteamGameServerNetworking.CreateConnectionSocket</definition>
        <argsstring>(uint nIP, ushort nPort, int nTimeoutSec)</argsstring>
        <name>CreateConnectionSocket</name>
        <param>
          <type>uint</type>
          <declname>nIP</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTimeoutSec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="137" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a41eb82d590c020681c3849d14219c9b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_s_net_listen_socket__t" kindref="compound">SNetListenSocket_t</ref></type>
        <definition>static SNetListenSocket_t Steamworks.SteamGameServerNetworking.CreateListenSocket</definition>
        <argsstring>(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)</argsstring>
        <name>CreateListenSocket</name>
        <param>
          <type>int</type>
          <declname>nVirtualP2PPort</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nIP</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nPort</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllowUseOfPacketRelay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>//////////////////////////////////////////////////////////////////////////////////////////</para><para>LISTEN / CONNECT style interface functions</para><para>This is an older set of functions designed around the Berkeley TCP sockets model</para><para>it&apos;s preferential that you use the above P2P functions, they&apos;re more robust</para><para>and these older functions will be removed eventually</para><para>//////////////////////////////////////////////////////////////////////////////////////////</para><para>creates a socket and listens others to connect</para><para>will trigger a <ref refid="struct_steamworks_1_1_socket_status_callback__t" kindref="compound">SocketStatusCallback_t</ref> callback on another client connecting</para><para>nVirtualP2PPort is the unique ID that the client will connect to, in case you have multiple ports</para><para>this can usually just be 0 unless you want multiple sets of connections</para><para>unIP is the local IP address to bind to</para><para>pass in 0 if you just want the default local IP</para><para>unPort is the port to use</para><para>pass in 0 if you don&apos;t want users to be able to connect via IP/Port, but expect to be always peer-to-peer connections only</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="121" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a769128d047c0fb985be32ac5d815e3ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
        <definition>static SNetSocket_t Steamworks.SteamGameServerNetworking.CreateP2PConnectionSocket</definition>
        <argsstring>(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)</argsstring>
        <name>CreateP2PConnectionSocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDTarget</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nVirtualPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTimeoutSec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllowUseOfPacketRelay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a socket and begin connection to a remote destination</para><para>can connect via a known steamID (client or game server), or directly to an IP</para><para>on success will trigger a <ref refid="struct_steamworks_1_1_socket_status_callback__t" kindref="compound">SocketStatusCallback_t</ref> callback</para><para>on failure or timeout will trigger a <ref refid="struct_steamworks_1_1_socket_status_callback__t" kindref="compound">SocketStatusCallback_t</ref> callback with a failure code in m_eSNetSocketState</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="132" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a58f943dc253d96af299174e21f4355e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.DestroyListenSocket</definition>
        <argsstring>(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)</argsstring>
        <name>DestroyListenSocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_listen_socket__t" kindref="compound">SNetListenSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bNotifyRemoteEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>destroying a listen socket will automatically kill all the regular sockets generated from it</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="155" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a91885f0c58f249bc7201a16bb53b0d49" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.DestroySocket</definition>
        <argsstring>(SNetSocket_t hSocket, bool bNotifyRemoteEnd)</argsstring>
        <name>DestroySocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bNotifyRemoteEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>disconnects the connection to the socket, if any, and invalidates the handle</para><para>any unread data on the socket will be thrown away</para><para>if bNotifyRemoteEnd is set, socket will not be completely destroyed until the remote end acknowledges the disconnect</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="147" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a01e814a9cb971cb4c85222f80eb5f16b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.GetListenSocketInfo</definition>
        <argsstring>(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)</argsstring>
        <name>GetListenSocketInfo</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_listen_socket__t" kindref="compound">SNetListenSocket_t</ref></type>
          <declname>hListenSocket</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pnIP</declname>
        </param>
        <param>
          <type>out ushort</type>
          <declname>pnPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns which local port the listen socket is bound to</para><para>*pnIP and *pnPort will be 0 if the socket is set to listen for P2P connections only</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="229" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a59ecb26824dc712fd4539993b0a35fcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamGameServerNetworking.GetMaxPacketSize</definition>
        <argsstring>(SNetSocket_t hSocket)</argsstring>
        <name>GetMaxPacketSize</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>max packet size, in bytes</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="245" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a097977a454492222d492045916d9b15d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.GetP2PSessionState</definition>
        <argsstring>(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)</argsstring>
        <name>GetP2PSessionState</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDRemote</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_p2_p_session_state__t" kindref="compound">P2PSessionState_t</ref></type>
          <declname>pConnectionState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fills out <ref refid="struct_steamworks_1_1_p2_p_session_state__t" kindref="compound">P2PSessionState_t</ref> structure with details about the underlying connection to the user</para><para>should only needed for debugging purposes</para><para>returns false if no connection exists to the specified user</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="89" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a9ce085fd091d501eb7e4992fc17c8700" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_steamworks_1ae737bd5e0e9eb42b2b99ba017acb2b15" kindref="member">ESNetSocketConnectionType</ref></type>
        <definition>static ESNetSocketConnectionType Steamworks.SteamGameServerNetworking.GetSocketConnectionType</definition>
        <argsstring>(SNetSocket_t hSocket)</argsstring>
        <name>GetSocketConnectionType</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true to describe how the socket ended up connecting</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="237" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a7de4b7ad5a7856df522e9066dcceefc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.GetSocketInfo</definition>
        <argsstring>(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)</argsstring>
        <name>GetSocketInfo</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>pSteamIDRemote</declname>
        </param>
        <param>
          <type>out int</type>
          <declname>peSocketStatus</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>punIPRemote</declname>
        </param>
        <param>
          <type>out ushort</type>
          <declname>punPortRemote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns information about the specified socket, filling out the contents of the pointers</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="220" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a9e4fe3e177074392f06f410db33a3a5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.IsDataAvailable</definition>
        <argsstring>(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)</argsstring>
        <name>IsDataAvailable</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_listen_socket__t" kindref="compound">SNetListenSocket_t</ref></type>
          <declname>hListenSocket</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>phSocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks for data from any socket that has been connected off this listen socket</para><para>returns false if there is no data remaining</para><para>fills out *pcubMsgSize with the size of the next message, in bytes</para><para>fills out *phSocket with the socket that data is available on</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="199" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1af1ee0831e66f1e1ffda4bc93a2a1bb32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.IsDataAvailableOnSocket</definition>
        <argsstring>(SNetSocket_t hSocket, out uint pcubMsgSize)</argsstring>
        <name>IsDataAvailableOnSocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>receiving data</para><para>returns false if there is no data remaining</para><para>fills out *pcubMsgSize with the size of the next message, in bytes</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="177" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1ab2d66804858b7a266dcf2be4b715742f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.IsP2PPacketAvailable</definition>
        <argsstring>(out uint pcubMsgSize, int nChannel=0)</argsstring>
        <name>IsP2PPacketAvailable</name>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nChannel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if any data is available for read, and the amount of data that will need to be read</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="36" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a19153e782a9273990d057c5f76e33d7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.ReadP2PPacket</definition>
        <argsstring>(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel=0)</argsstring>
        <name>ReadP2PPacket</name>
        <param>
          <type>byte[]</type>
          <declname>pubDest</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>cubDest</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>psteamIDRemote</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nChannel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads in a packet that has been sent from another user via <ref refid="class_steamworks_1_1_steam_game_server_networking_1ad26065546f6f916a3ba3114301e0fbd8" kindref="member">SendP2PPacket()</ref></para><para>returns the size of the message and the steamID of the user who sent it in the last two parameters</para><para>if the buffer passed in is too small, the message will be truncated</para><para>this call is not blocking, and will return false if no data is available</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="47" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a4e9746ef35f8fca22356f934f4a36e3e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.RetrieveData</definition>
        <argsstring>(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)</argsstring>
        <name>RetrieveData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_listen_socket__t" kindref="compound">SNetListenSocket_t</ref></type>
          <declname>hListenSocket</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pubDest</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>cubDest</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>phSocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieves data from any socket that has been connected off this listen socket</para><para>fills in pubDest with the contents of the message</para><para>messages are always complete, of the same size as was sent (i.e. packetized, not streaming)</para><para>if *pcubMsgSize &lt; cubDest, only partial data is written</para><para>returns false if no data is available</para><para>fills out *phSocket with the socket that data is available on</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="212" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1ab642aec83c32b762f5ffdf9c9d318a7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.RetrieveDataFromSocket</definition>
        <argsstring>(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)</argsstring>
        <name>RetrieveDataFromSocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pubDest</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>cubDest</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pcubMsgSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fills in pubDest with the contents of the message</para><para>messages are always complete, of the same size as was sent (i.e. packetized, not streaming)</para><para>if *pcubMsgSize &lt; cubDest, only partial data is written</para><para>returns false if no data is available</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="188" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1a455c46c43f90ac611d26606cf386a095" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.SendDataOnSocket</definition>
        <argsstring>(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)</argsstring>
        <name>SendDataOnSocket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_s_net_socket__t" kindref="compound">SNetSocket_t</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pubData</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>cubData</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReliable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sending data</para><para>must be a handle to a connected socket</para><para>data is all sent via UDP, and thus send sizes are limited to 1200 bytes; after this, many routers will start dropping packets</para><para>use the reliable flag with caution; although the resend rate is pretty aggressive,</para><para>it can still cause stalls in receiving data (like TCP)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="167" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_game_server_networking_1ad26065546f6f916a3ba3114301e0fbd8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamGameServerNetworking.SendP2PPacket</definition>
        <argsstring>(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel=0)</argsstring>
        <name>SendP2PPacket</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDRemote</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pubData</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>cubData</declname>
        </param>
        <param>
          <type><ref refid="namespace_steamworks_1a9d14557b2cea8d63500e7b65a4af20c2" kindref="member">EP2PSend</ref></type>
          <declname>eP2PSendType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nChannel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>//////////////////////////////////////////////////////////////////////////////////////////</para><para>Session-less connection functions</para><para>automatically establishes NAT-traversing or Relay server connections</para><para>Sends a P2P packet to the specified user</para><para>UDP-like, unreliable and a max packet size of 1200 bytes</para><para>the first packet send may be delayed as the NAT-traversal code runs</para><para>if we can&apos;t get through to the user, an error will be posted via the callback <ref refid="struct_steamworks_1_1_p2_p_session_connect_fail__t" kindref="compound">P2PSessionConnectFail_t</ref></para><para>see EP2PSend enum above for the descriptions of the different ways of sending packets</para><para>nChannel is a routing number you can use to help route message to different systems - you&apos;ll have to call <ref refid="class_steamworks_1_1_steam_game_server_networking_1a19153e782a9273990d057c5f76e33d7a" kindref="member">ReadP2PPacket()</ref></para><para>with the same channel number in order to retrieve the data on the other end</para><para>using different channels to talk to the same user will still use the same underlying p2p connection, saving on resources</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="28" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="28" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" line="14" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteamgameservernetworking.cs" bodystart="14" bodyend="249"/>
    <listofallmembers>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1aa6f1b5c53472141a7b892070eb981cdf" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>AcceptP2PSessionWithUser</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a502611a1c7f7e110275c313c87d8c58b" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>AllowP2PPacketRelay</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a6bdfd28622b0381a29fe3226a94cbf39" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>CloseP2PChannelWithUser</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a009a2713b4af64df3c890bc138d1d44b" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>CloseP2PSessionWithUser</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a3ee8f01dfcba6f683a3bb3110a94ae91" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>CreateConnectionSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a41eb82d590c020681c3849d14219c9b8" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>CreateListenSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a769128d047c0fb985be32ac5d815e3ec" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>CreateP2PConnectionSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a58f943dc253d96af299174e21f4355e4" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>DestroyListenSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a91885f0c58f249bc7201a16bb53b0d49" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>DestroySocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a01e814a9cb971cb4c85222f80eb5f16b" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>GetListenSocketInfo</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a59ecb26824dc712fd4539993b0a35fcc" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>GetMaxPacketSize</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a097977a454492222d492045916d9b15d" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>GetP2PSessionState</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a9ce085fd091d501eb7e4992fc17c8700" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>GetSocketConnectionType</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a7de4b7ad5a7856df522e9066dcceefc2" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>GetSocketInfo</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a9e4fe3e177074392f06f410db33a3a5f" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>IsDataAvailable</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1af1ee0831e66f1e1ffda4bc93a2a1bb32" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>IsDataAvailableOnSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1ab2d66804858b7a266dcf2be4b715742f" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>IsP2PPacketAvailable</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a19153e782a9273990d057c5f76e33d7a" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>ReadP2PPacket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a4e9746ef35f8fca22356f934f4a36e3e" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>RetrieveData</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1ab642aec83c32b762f5ffdf9c9d318a7a" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>RetrieveDataFromSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1a455c46c43f90ac611d26606cf386a095" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>SendDataOnSocket</name></member>
      <member refid="class_steamworks_1_1_steam_game_server_networking_1ad26065546f6f916a3ba3114301e0fbd8" prot="public" virt="non-virtual"><scope>Steamworks::SteamGameServerNetworking</scope><name>SendP2PPacket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
