<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_comm_net_1_1_comm_network" kind="class" prot="public">
    <compoundname>CommNet::CommNetwork</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Net&lt; CommNetwork, CommNode, CommLink, CommPath &gt;</basecompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_comm_net_1_1_comm_network_1aba13075459d549f6c4f6cce075da5dea" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CommNet.CommNetwork.isDirty</definition>
        <argsstring></argsstring>
        <name>isDirty</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="10" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_comm_net_1_1_comm_network_1a10f9a44e7b6da88c8b729e6847e399ed" prot="public" static="no" readable="no" writable="no" gettable="yes" settable="no">
        <type>bool</type>
        <definition>bool CommNet.CommNetwork.IsDirty</definition>
        <argsstring></argsstring>
        <name>IsDirty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="11" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a1e4931731f356fa3bad1886151c7d78b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
        <definition>override CommNode CommNet.CommNetwork.Add</definition>
        <argsstring>(CommNode conn)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="238" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="238" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ac6483aeb48eabe4efd6e30a6525deec8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string CommNet.CommNetwork.CreateDebug</definition>
        <argsstring>()</argsstring>
        <name>CreateDebug</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="584" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="584" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a9cfc191092f8ea10089f9b23a8c8a5d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool CommNet.CommNetwork.FindClosestControlSource</definition>
        <argsstring>(CommNode from, CommPath path=null)</argsstring>
        <name>FindClosestControlSource</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_path" kindref="compound">CommPath</ref></type>
          <declname>path</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Find the closest control source of any type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="48" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="48" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a7244bb048684bf5a17ee3b740140b199" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
        <definition>override CommNode CommNet.CommNetwork.FindClosestWhere</definition>
        <argsstring>(CommNode start, CommPath path, Func&lt; CommNode, CommNode, bool &gt; where)</argsstring>
        <name>FindClosestWhere</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_path" kindref="compound">CommPath</ref></type>
          <declname>path</declname>
        </param>
        <param>
          <type>Func&lt; <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref>, <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref>, bool &gt;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Find the best path to the closest node that matches the where condition </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; Reset all cells</para><para>&lt; Add the root node to the candidate list.</para><para>&lt; Process the candidate list until empty. </para>        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="125" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="125" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a78d2fe4e0e52d0bafded98269ce50035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool CommNet.CommNetwork.FindHome</definition>
        <argsstring>(CommNode from, CommPath path=null)</argsstring>
        <name>FindHome</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_path" kindref="compound">CommPath</ref></type>
          <declname>path</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Find a path to home, syntactic sugar for <ref refid="class_comm_net_1_1_comm_network_1a7244bb048684bf5a17ee3b740140b199" kindref="member">FindClosestWhere()</ref> where where IsHome </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="30" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ab3c35970caed4e281ded1612770acdfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool CommNet.CommNetwork.FindPath</definition>
        <argsstring>(CommNode start, CommPath path, CommNode end)</argsstring>
        <name>FindPath</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_path" kindref="compound">CommPath</ref></type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Find best path between start and end </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="67" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="67" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1af388d812663e3b69ff04acd5bc1b9a05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void CommNet.CommNetwork.Rebuild</definition>
        <argsstring>()</argsstring>
        <name>Rebuild</name>
        <briefdescription>
<para>Rebuild the graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="16" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ac4bf2a9e6e5b9138a97ddf00b8893d49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool CommNet.CommNetwork.Remove</definition>
        <argsstring>(CommNode conn)</argsstring>
        <name>Remove</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="248" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="248" bodyend="256"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a421df5a36ddb81f1abe2c3d668160845" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void CommNet.CommNetwork.CreateShortestPathTree</definition>
        <argsstring>(CommNode start, CommNode end)</argsstring>
        <name>CreateShortestPathTree</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Reset all cells</para><para>&lt; Add the root node to the candidate list.</para><para>&lt; Process the candidate list until empty. </para>        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="485" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="485" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a144f2c89052bd94f4f235bc2d8e1a07e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool CommNet.CommNetwork.SetNodeConnection</definition>
        <argsstring>(CommNode a, CommNode b)</argsstring>
        <name>SetNodeConnection</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Updates connection state between two nodes, setting connected or not </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; handle distance offset</para><para>&lt; test occlusion, try connecting </para>        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="368" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="368" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a09513574bb4857884cc61152de151402" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool CommNet.CommNetwork.TestOcclusion</definition>
        <argsstring>(Vector3d aPos, Occluder a, Vector3d bPos, Occluder b, double distance)</argsstring>
        <name>TestOcclusion</name>
        <param>
          <type><ref refid="struct_vector3d" kindref="compound">Vector3d</ref></type>
          <declname>aPos</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_occluder" kindref="compound">Occluder</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_vector3d" kindref="compound">Vector3d</ref></type>
          <declname>bPos</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_occluder" kindref="compound">Occluder</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Returns true if not occluded (sue me) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPos</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bPos</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="456" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="456" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ad0ef7dbe8493c80c25dc356aa03baebe" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool CommNet.CommNetwork.TryConnect</definition>
        <argsstring>(CommNode a, CommNode b, double distance, bool aCanRelay, bool bCanRelay, bool bothRelay)</argsstring>
        <name>TryConnect</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>aCanRelay</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bCanRelay</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bothRelay</declname>
        </param>
        <briefdescription>
<para>Given nodes a and b are in range, try connecting them and store whether both can relay and whether each individually can using the other&apos;s non-relay transmitter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCanRelay</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bCanRelay</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bothRelay</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="268" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="268" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ae3b73c03f9e57026d0162a086410dfd9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void CommNet.CommNetwork.UpdateShortestPath</definition>
        <argsstring>(CommNode a, CommNode b, CommLink link, double bestCost, CommNode startNode, CommNode endNode)</argsstring>
        <name>UpdateShortestPath</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_link" kindref="compound">CommLink</ref></type>
          <declname>link</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bestCost</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>startNode</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>endNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="524" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="524" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a793540f6f7f0219411567123f32b7850" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
        <definition>override CommNode CommNet.CommNetwork.UpdateShortestWhere</definition>
        <argsstring>(CommNode a, CommNode b, CommLink link, double bestCost, CommNode startNode, Func&lt; CommNode, CommNode, bool &gt; whereClause)</argsstring>
        <name>UpdateShortestWhere</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_link" kindref="compound">CommLink</ref></type>
          <declname>link</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bestCost</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>startNode</declname>
        </param>
        <param>
          <type>Func&lt; <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref>, <ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref>, bool &gt;</type>
          <declname>whereClause</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="546" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="546" bodyend="578"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1a12beed90028ab770002ec6243aa22496" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CommNet.CommNetwork.IsControlSource</definition>
        <argsstring>(CommNode start, CommNode a)</argsstring>
        <name>IsControlSource</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="474" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="class_comm_net_1_1_comm_network_1ae331fe1a53ea63c7a08b113111bc354a" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CommNet.CommNetwork.IsHome</definition>
        <argsstring>(CommNode start, CommNode a)</argsstring>
        <name>IsHome</name>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="class_comm_net_1_1_comm_node" kindref="compound">CommNode</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="480" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="480" bodyend="483"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="38509">
        <label>CommNet.CommNetwork</label>
        <link refid="class_comm_net_1_1_comm_network"/>
        <childnode refid="38510" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38510">
        <label>Net&lt; CommNetwork, CommNode, CommLink, CommPath &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="38511">
        <label>CommNet.CommNetwork</label>
        <link refid="class_comm_net_1_1_comm_network"/>
        <childnode refid="38512" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38512">
        <label>Net&lt; CommNetwork, CommNode, CommLink, CommPath &gt;</label>
      </node>
    </collaborationgraph>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" line="9" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Scripts/CommNet/CommNet/CommNetwork.cs" bodystart="8" bodyend="602"/>
    <listofallmembers>
      <member refid="class_comm_net_1_1_comm_network_1a1e4931731f356fa3bad1886151c7d78b" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>Add</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ac6483aeb48eabe4efd6e30a6525deec8" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>CreateDebug</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a421df5a36ddb81f1abe2c3d668160845" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>CreateShortestPathTree</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a9cfc191092f8ea10089f9b23a8c8a5d7" prot="public" virt="virtual"><scope>CommNet::CommNetwork</scope><name>FindClosestControlSource</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a7244bb048684bf5a17ee3b740140b199" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>FindClosestWhere</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a78d2fe4e0e52d0bafded98269ce50035" prot="public" virt="virtual"><scope>CommNet::CommNetwork</scope><name>FindHome</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ab3c35970caed4e281ded1612770acdfe" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>FindPath</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a12beed90028ab770002ec6243aa22496" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>IsControlSource</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a10f9a44e7b6da88c8b729e6847e399ed" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>IsDirty</name></member>
      <member refid="class_comm_net_1_1_comm_network_1aba13075459d549f6c4f6cce075da5dea" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>isDirty</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ae331fe1a53ea63c7a08b113111bc354a" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>IsHome</name></member>
      <member refid="class_comm_net_1_1_comm_network_1af388d812663e3b69ff04acd5bc1b9a05" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>Rebuild</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ac4bf2a9e6e5b9138a97ddf00b8893d49" prot="public" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>Remove</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a144f2c89052bd94f4f235bc2d8e1a07e" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>SetNodeConnection</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a09513574bb4857884cc61152de151402" prot="protected" virt="virtual"><scope>CommNet::CommNetwork</scope><name>TestOcclusion</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ad0ef7dbe8493c80c25dc356aa03baebe" prot="protected" virt="virtual"><scope>CommNet::CommNetwork</scope><name>TryConnect</name></member>
      <member refid="class_comm_net_1_1_comm_network_1ae3b73c03f9e57026d0162a086410dfd9" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>UpdateShortestPath</name></member>
      <member refid="class_comm_net_1_1_comm_network_1a793540f6f7f0219411567123f32b7850" prot="protected" virt="non-virtual"><scope>CommNet::CommNetwork</scope><name>UpdateShortestWhere</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
