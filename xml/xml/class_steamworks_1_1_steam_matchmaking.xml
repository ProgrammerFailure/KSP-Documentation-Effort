<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_steamworks_1_1_steam_matchmaking" kind="class" prot="public">
    <compoundname>Steamworks::SteamMatchmaking</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a0593f3e91cb430c3268627912de1abc6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.AddFavoriteGame</definition>
        <argsstring>(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)</argsstring>
        <name>AddFavoriteGame</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_app_id__t" kindref="compound">AppId_t</ref></type>
          <declname>nAppID</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nIP</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nConnPort</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nQueryPort</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unFlags</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>rTime32LastPlayedOnServer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds the game server to the local list; updates the time played of the server if it already exists in the list</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="40" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a60198810cd43e62f1633272c71541209" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListCompatibleMembersFilter</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>AddRequestLobbyListCompatibleMembersFilter</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="139" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a880ffccb6e0987fae039dc60054a0170" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListDistanceFilter</definition>
        <argsstring>(ELobbyDistanceFilter eLobbyDistanceFilter)</argsstring>
        <name>AddRequestLobbyListDistanceFilter</name>
        <param>
          <type><ref refid="namespace_steamworks_1a4026cbf30b896d6c16f9588659444dd1" kindref="member">ELobbyDistanceFilter</ref></type>
          <declname>eLobbyDistanceFilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the distance for which we should search for lobbies (based on users IP address to location map on the Steam backed)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="126" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a61afda7f4aacde94d4d18e698aff306e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListFilterSlotsAvailable</definition>
        <argsstring>(int nSlotsAvailable)</argsstring>
        <name>AddRequestLobbyListFilterSlotsAvailable</name>
        <param>
          <type>int</type>
          <declname>nSlotsAvailable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns only lobbies with the specified number of slots available</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="118" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a2119b232c8925a5136f88a3ff8ca155c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListNearValueFilter</definition>
        <argsstring>(string pchKeyToMatch, int nValueToBeCloseTo)</argsstring>
        <name>AddRequestLobbyListNearValueFilter</name>
        <param>
          <type>string</type>
          <declname>pchKeyToMatch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nValueToBeCloseTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns results closest to the specified value. Multiple near filters can be added, with early filters taking precedence</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="108" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aa17ffa035f4426936a3184a4f4fb0a65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListNumericalFilter</definition>
        <argsstring>(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)</argsstring>
        <name>AddRequestLobbyListNumericalFilter</name>
        <param>
          <type>string</type>
          <declname>pchKeyToMatch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nValueToMatch</declname>
        </param>
        <param>
          <type><ref refid="namespace_steamworks_1a833964a493bd535c661b4064bca3a038" kindref="member">ELobbyComparison</ref></type>
          <declname>eComparisonType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>numerical comparison</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="98" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a07f5c20c0035da017aece70a78037dc0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListResultCountFilter</definition>
        <argsstring>(int cMaxResults)</argsstring>
        <name>AddRequestLobbyListResultCountFilter</name>
        <param>
          <type>int</type>
          <declname>cMaxResults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets how many results to return, the lower the count the faster it is to download the lobby results &amp; details to the client</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="134" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a9812ff7abf6885832fde75366b5b2236" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.AddRequestLobbyListStringFilter</definition>
        <argsstring>(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)</argsstring>
        <name>AddRequestLobbyListStringFilter</name>
        <param>
          <type>string</type>
          <declname>pchKeyToMatch</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchValueToMatch</declname>
        </param>
        <param>
          <type><ref refid="namespace_steamworks_1a833964a493bd535c661b4064bca3a038" kindref="member">ELobbyComparison</ref></type>
          <declname>eComparisonType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>filters for lobbies</para><para>this needs to be called before <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref> to take effect</para><para>these are cleared on each call to <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="87" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1afd907a2a3c408af8a5d3b8a06339e834" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref></type>
        <definition>static SteamAPICall_t Steamworks.SteamMatchmaking.CreateLobby</definition>
        <argsstring>(ELobbyType eLobbyType, int cMaxMembers)</argsstring>
        <name>CreateLobby</name>
        <param>
          <type><ref refid="namespace_steamworks_1a92e2a002aeeaea673a86a1e83b1bc784" kindref="member">ELobbyType</ref></type>
          <declname>eLobbyType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cMaxMembers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a lobby on the Steam servers.</para><para>If private, then the lobby will not be returned by any <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref> call; the <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></para><para>of the lobby will need to be communicated via game channels or via <ref refid="class_steamworks_1_1_steam_matchmaking_1adb99cb6ab141daeb8f0395b75c0eef54" kindref="member">InviteUserToLobby()</ref></para><para>this is an asynchronous request</para><para>results will be returned by <ref refid="struct_steamworks_1_1_lobby_created__t" kindref="compound">LobbyCreated_t</ref> callback and call result; lobby is joined &amp; ready to use at this point</para><para>a <ref refid="struct_steamworks_1_1_lobby_enter__t" kindref="compound">LobbyEnter_t</ref> callback will also be received (since the local user is joining their own lobby)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="163" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a87015dda273c34c87202dff03c2a1bcd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.DeleteLobbyData</definition>
        <argsstring>(CSteamID steamIDLobby, string pchKey)</argsstring>
        <name>DeleteLobbyData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>removes a metadata key from the lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="276" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ac4a18fb7d4c3fe8a52262bf10819de00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.GetFavoriteGame</definition>
        <argsstring>(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)</argsstring>
        <name>GetFavoriteGame</name>
        <param>
          <type>int</type>
          <declname>iGame</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_app_id__t" kindref="compound">AppId_t</ref></type>
          <declname>pnAppID</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pnIP</declname>
        </param>
        <param>
          <type>out ushort</type>
          <declname>pnConnPort</declname>
        </param>
        <param>
          <type>out ushort</type>
          <declname>pnQueryPort</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>punFlags</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>pRTime32LastPlayedOnServer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the details of the game server</para><para>iGame is of range [0,<ref refid="class_steamworks_1_1_steam_matchmaking_1aa02cf3fc75c7956274a25a1b0b0b7842" kindref="member">GetFavoriteGameCount()</ref>)</para><para>*pnIP, *pnConnPort are filled in the with IP:port of the game server</para><para>*punFlags specify whether the game server was stored as an explicit favorite or in the history of connections</para><para>*pRTime32LastPlayedOnServer is filled in the with the Unix time the favorite was added</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="32" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aa02cf3fc75c7956274a25a1b0b0b7842" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.GetFavoriteGameCount</definition>
        <argsstring>()</argsstring>
        <name>GetFavoriteGameCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>game server favorites storage</para><para>saves basic details about a multiplayer game server locally</para><para>returns the number of favorites servers the user has stored</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="20" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ab05ea7bfbb66e71f9c8168bd59658139" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
        <definition>static CSteamID Steamworks.SteamMatchmaking.GetLobbyByIndex</definition>
        <argsstring>(int iLobby)</argsstring>
        <name>GetLobbyByIndex</name>
        <param>
          <type>int</type>
          <declname>iLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref> of a lobby, as retrieved by a RequestLobbyList call</para><para>should only be called after a <ref refid="struct_steamworks_1_1_lobby_match_list__t" kindref="compound">LobbyMatchList_t</ref> callback is received</para><para>iLobby is of the range [0, <ref refid="struct_steamworks_1_1_lobby_match_list__t_1af87f1e6bfb079e7100a6ebfed3554e91" kindref="member">LobbyMatchList_t::m_nLobbiesMatching</ref>)</para><para>the returned <ref refid="struct_steamworks_1_1_c_steam_i_d_1a23296b852f33db5f5e490f0c4a1d083e" kindref="member">CSteamID::IsValid()</ref> will be false if iLobby is out of range</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="150" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ab32cf5b623bf344150ec5b9de347df44" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.GetLobbyChatEntry</definition>
        <argsstring>(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)</argsstring>
        <name>GetLobbyChatEntry</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iChatID</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>pSteamIDUser</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pvData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cubData</declname>
        </param>
        <param>
          <type>out <ref refid="namespace_steamworks_1a79026983b84ff7336224b4b853c8c59b" kindref="member">EChatEntryType</ref></type>
          <declname>peChatEntryType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a chat message as specified in a <ref refid="struct_steamworks_1_1_lobby_chat_msg__t" kindref="compound">LobbyChatMsg_t</ref> callback</para><para>iChatID is the <ref refid="struct_steamworks_1_1_lobby_chat_msg__t_1a6f1d881f3c0798859ddbb81726d33c97" kindref="member">LobbyChatMsg_t::m_iChatID</ref> value in the callback</para><para>*pSteamIDUser is filled in with the <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref> of the member</para><para>*pvData is filled in with the message itself</para><para>return value is the number of bytes written into the buffer</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="323" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a82f793c9528365bf292eae23fdd74ef2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>static string Steamworks.SteamMatchmaking.GetLobbyData</definition>
        <argsstring>(CSteamID steamIDLobby, string pchKey)</argsstring>
        <name>GetLobbyData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data associated with this lobby</para><para>takes a simple key, and returns the string associated with it</para><para>&quot;&quot; will be returned if no value is set, or if steamIDLobby is invalid</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="228" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a6a7d5098bed787ac881dbd6f949d457f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.GetLobbyDataByIndex</definition>
        <argsstring>(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)</argsstring>
        <name>GetLobbyDataByIndex</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iLobbyData</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>pchKey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cchKeyBufferSize</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>pchValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cchValueBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a lobby metadata key/values pair by index, of range [0, <ref refid="class_steamworks_1_1_steam_matchmaking_1aab8d50df58d63682540291bb3968ae36" kindref="member">GetLobbyDataCount()</ref>)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="261" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="261" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aab8d50df58d63682540291bb3968ae36" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.GetLobbyDataCount</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>GetLobbyDataCount</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of metadata keys set on the specified lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="253" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a3222459e3c037fa4cf5161abc7395734" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.GetLobbyGameServer</definition>
        <argsstring>(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)</argsstring>
        <name>GetLobbyGameServer</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>out uint</type>
          <declname>punGameServerIP</declname>
        </param>
        <param>
          <type>out ushort</type>
          <declname>punGameServerPort</declname>
        </param>
        <param>
          <type>out <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>psteamIDGameServer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the details of a game server set in a lobby - returns false if there is no game server set, or that lobby doesn&apos;t exist</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="355" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a99b501994dbc20cd8b779b3382cfab4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
        <definition>static CSteamID Steamworks.SteamMatchmaking.GetLobbyMemberByIndex</definition>
        <argsstring>(CSteamID steamIDLobby, int iMember)</argsstring>
        <name>GetLobbyMemberByIndex</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iMember</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref> of a user in the lobby</para><para>iMember is of range [0,<ref refid="class_steamworks_1_1_steam_matchmaking_1a52b4cf5d1dc5e98dace30e617a1459a7" kindref="member">GetNumLobbyMembers()</ref>)</para><para>note that the current user must be in a lobby to retrieve CSteamIDs of other users in that lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="218" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a56776d5b567f4986be8a600088f63471" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>static string Steamworks.SteamMatchmaking.GetLobbyMemberData</definition>
        <argsstring>(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)</argsstring>
        <name>GetLobbyMemberData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDUser</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets per-user metadata for someone in this lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="286" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a699801e8459c24d403c0fd7c377fc19d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.GetLobbyMemberLimit</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>GetLobbyMemberLimit</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the current limit on the # of users who can join the lobby; returns 0 if no limit is defined</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="371" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ae654e81cb3e5dc55531f5b8b4aa1e8da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
        <definition>static CSteamID Steamworks.SteamMatchmaking.GetLobbyOwner</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>GetLobbyOwner</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the current lobby owner</para><para>you must be a member of the lobby to access this</para><para>there always one lobby owner - if the current owner leaves, another user will become the owner</para><para>it is possible (bur rare) to join a lobby just as the owner is leaving, thus entering a lobby with self as the owner</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="400" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a52b4cf5d1dc5e98dace30e617a1459a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Steamworks.SteamMatchmaking.GetNumLobbyMembers</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>GetNumLobbyMembers</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lobby iteration, for viewing details of users in a lobby</para><para>only accessible if the lobby user is a member of the specified lobby</para><para>persona information for other lobby members (name, avatar, etc.) will be asynchronously received</para><para>and accessible via ISteamFriends interface</para><para>returns the number of users in the specified lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="208" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1adb99cb6ab141daeb8f0395b75c0eef54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.InviteUserToLobby</definition>
        <argsstring>(CSteamID steamIDLobby, CSteamID steamIDInvitee)</argsstring>
        <name>InviteUserToLobby</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDInvitee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invite another user to the lobby</para><para>the target user will receive a <ref refid="struct_steamworks_1_1_lobby_invite__t" kindref="compound">LobbyInvite_t</ref> callback</para><para>will return true if the invite is successfully sent, whether or not the target responds</para><para>returns false if the local user is not connected to the Steam servers</para><para>if the other user clicks the join link, a <ref refid="struct_steamworks_1_1_game_lobby_join_requested__t" kindref="compound">GameLobbyJoinRequested_t</ref> will be posted if the user is in-game,</para><para>or if the game isn&apos;t running yet the game will be launched with the parameter +connect_lobby &lt;64-bit lobby id&gt;</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="196" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a58d664c2f28d9f6b462bbde2a119d4af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref></type>
        <definition>static SteamAPICall_t Steamworks.SteamMatchmaking.JoinLobby</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>JoinLobby</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Joins an existing lobby</para><para>this is an asynchronous request</para><para>results will be returned by <ref refid="struct_steamworks_1_1_lobby_enter__t" kindref="compound">LobbyEnter_t</ref> callback &amp; call result, check m_EChatRoomEnterResponse to see if was successful</para><para>lobby metadata is available to use immediately on this call completing</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="174" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aed931c21f4edd76ab9fb05b7a6baa0a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.LeaveLobby</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>LeaveLobby</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leave a lobby; this will take effect immediately on the client side</para><para>other users in the lobby will be notified by a <ref refid="struct_steamworks_1_1_lobby_chat_update__t" kindref="compound">LobbyChatUpdate_t</ref> callback</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="183" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a5a3822c24bd141453c87312f169a71ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.RemoveFavoriteGame</definition>
        <argsstring>(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)</argsstring>
        <name>RemoveFavoriteGame</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_app_id__t" kindref="compound">AppId_t</ref></type>
          <declname>nAppID</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nIP</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nConnPort</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>nQueryPort</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>removes the game server from the local storage; returns true if one was removed</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="48" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ac27e6fdc1b5cd77c6b189c6e884bac3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.RequestLobbyData</definition>
        <argsstring>(CSteamID steamIDLobby)</argsstring>
        <name>RequestLobbyData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refreshes metadata for a lobby you&apos;re not necessarily in right now</para><para>you never do this for lobbies you&apos;re a member of, only if your</para><para>this will send down all the metadata associated with a lobby</para><para>this is an asynchronous call</para><para>returns false if the local user is not connected to the Steam servers</para><para>results will be returned by a <ref refid="struct_steamworks_1_1_lobby_data_update__t" kindref="compound">LobbyDataUpdate_t</ref> callback</para><para>if the specified lobby doesn&apos;t exist, <ref refid="struct_steamworks_1_1_lobby_data_update__t_1a1ea4a1fa2eb920ed2436a789c6f0f36a" kindref="member">LobbyDataUpdate_t::m_bSuccess</ref> will be set to false</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="337" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref></type>
        <definition>static SteamAPICall_t Steamworks.SteamMatchmaking.RequestLobbyList</definition>
        <argsstring>()</argsstring>
        <name>RequestLobbyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>/////</para><para><ref refid="class_game" kindref="compound">Game</ref> lobby functions</para><para>Get a list of relevant lobbies</para><para>this is an asynchronous request</para><para>results will be returned by <ref refid="struct_steamworks_1_1_lobby_match_list__t" kindref="compound">LobbyMatchList_t</ref> callback &amp; call result, with the number of lobbies found</para><para>this will never return lobbies that are full</para><para>to add more filter, the filter calls below need to be call before each and every <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref> call</para><para>use the CCallResult&lt;&gt; object in steam_api.h to match the <ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref> call result to a function in an object, e.g.</para><para>class CMyLobbyListManager</para><para>{</para><para>CCallResult&lt;CMyLobbyListManager, <ref refid="struct_steamworks_1_1_lobby_match_list__t" kindref="compound">LobbyMatchList_t</ref>&gt; m_CallResultLobbyMatchList;</para><para>void FindLobbies()</para><para>{</para><para>// SteamMatchmaking()-&gt;AddRequestLobbyListFilter*() functions would be called here, before <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref></para><para><ref refid="struct_steamworks_1_1_steam_a_p_i_call__t" kindref="compound">SteamAPICall_t</ref> hSteamAPICall = SteamMatchmaking()-&gt;<ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref>;</para><para>m_CallResultLobbyMatchList.Set( hSteamAPICall, this, &amp;CMyLobbyListManager::OnLobbyMatchList );</para><para>}</para><para>void OnLobbyMatchList( LobbyMatchList_t *pLobbyMatchList, bool bIOFailure )</para><para>{</para><para>// lobby list has be retrieved from Steam back-end, use results</para><para>}</para><para>}</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="77" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aa1ccc3e4335e03d9e1178d932947f7eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SendLobbyChatMsg</definition>
        <argsstring>(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)</argsstring>
        <name>SendLobbyChatMsg</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>pvMsgBody</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cubMsgBody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcasts a chat message to the all the users in the lobby</para><para>users in the lobby (including the local user) will receive a <ref refid="struct_steamworks_1_1_lobby_chat_msg__t" kindref="compound">LobbyChatMsg_t</ref> callback</para><para>returns true if the message is successfully sent</para><para>pvMsgBody can be binary or text data, up to 4k</para><para>if pvMsgBody is text, cubMsgBody should be strlen( text ) + 1, to include the null terminator</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="311" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a0d2beda14bc9ec26157b83a9a1f9fb6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLinkedLobby</definition>
        <argsstring>(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)</argsstring>
        <name>SetLinkedLobby</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobbyDependent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>link two lobbies for the purposes of checking player compatibility</para><para>you must be the lobby owner of both lobbies</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="419" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a27dcc95de333635de0edf6fbf8b1b6b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLobbyData</definition>
        <argsstring>(CSteamID steamIDLobby, string pchKey, string pchValue)</argsstring>
        <name>SetLobbyData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchKey</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a key/value pair in the lobby metadata</para><para>each user in the lobby will be broadcast this new value, and any new users joining will receive any existing data</para><para>this can be used to set lobby names, map, etc.</para><para>to reset a key, just set it to &quot;&quot;</para><para>other users in the lobby will receive notification of the lobby data change via a <ref refid="struct_steamworks_1_1_lobby_data_update__t" kindref="compound">LobbyDataUpdate_t</ref> callback</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="242" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="242" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aa9cefe0ae9aae79656550bf8fbe9fdcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.SetLobbyGameServer</definition>
        <argsstring>(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)</argsstring>
        <name>SetLobbyGameServer</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unGameServerIP</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>unGameServerPort</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDGameServer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the game server associated with the lobby</para><para>usually at this point, the users will join the specified game server</para><para>either the IP/Port or the steamID of the game server has to be valid, depending on how you want the clients to be able to connect</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="347" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a3aa13ac77cf657591f3b41ba0f80cd99" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLobbyJoinable</definition>
        <argsstring>(CSteamID steamIDLobby, bool bLobbyJoinable)</argsstring>
        <name>SetLobbyJoinable</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bLobbyJoinable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets whether or not a lobby is joinable - defaults to true for a new lobby</para><para>if set to false, no user can join, even if they are a friend or have been invited</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="389" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a80ea0d00def5a62239fa5cf926554d89" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Steamworks.SteamMatchmaking.SetLobbyMemberData</definition>
        <argsstring>(CSteamID steamIDLobby, string pchKey, string pchValue)</argsstring>
        <name>SetLobbyMemberData</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchKey</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets per-user metadata (for the local user implicitly)</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="296" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1aa3e714fe5cf4901a871eb0f0ce146546" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLobbyMemberLimit</definition>
        <argsstring>(CSteamID steamIDLobby, int cMaxMembers)</argsstring>
        <name>SetLobbyMemberLimit</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cMaxMembers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the limit on the # of users who can join the lobby</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="363" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1a4886997c27a182a375703342df3f7d7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLobbyOwner</definition>
        <argsstring>(CSteamID steamIDLobby, CSteamID steamIDNewOwner)</argsstring>
        <name>SetLobbyOwner</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDNewOwner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes who the lobby owner is</para><para>you must be the lobby owner for this to succeed, and steamIDNewOwner must be in the lobby</para><para>after completion, the local user will no longer be the owner</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="410" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_steamworks_1_1_steam_matchmaking_1ac800bd4da5a7aea1cf9764438a5e1eb6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Steamworks.SteamMatchmaking.SetLobbyType</definition>
        <argsstring>(CSteamID steamIDLobby, ELobbyType eLobbyType)</argsstring>
        <name>SetLobbyType</name>
        <param>
          <type><ref refid="struct_steamworks_1_1_c_steam_i_d" kindref="compound">CSteamID</ref></type>
          <declname>steamIDLobby</declname>
        </param>
        <param>
          <type><ref refid="namespace_steamworks_1a92e2a002aeeaea673a86a1e83b1bc784" kindref="member">ELobbyType</ref></type>
          <declname>eLobbyType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>updates which type of lobby it is</para><para>only lobbies that are k_ELobbyTypePublic or k_ELobbyTypeInvisible, and are set to joinable, will be returned by <ref refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" kindref="member">RequestLobbyList()</ref> calls</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="380" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="380" bodyend="383"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" line="14" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Plugins/Steamworks.NET/autogen/isteammatchmaking.cs" bodystart="14" bodyend="434"/>
    <listofallmembers>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a0593f3e91cb430c3268627912de1abc6" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddFavoriteGame</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a60198810cd43e62f1633272c71541209" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListCompatibleMembersFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a880ffccb6e0987fae039dc60054a0170" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListDistanceFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a61afda7f4aacde94d4d18e698aff306e" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListFilterSlotsAvailable</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a2119b232c8925a5136f88a3ff8ca155c" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListNearValueFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aa17ffa035f4426936a3184a4f4fb0a65" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListNumericalFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a07f5c20c0035da017aece70a78037dc0" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListResultCountFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a9812ff7abf6885832fde75366b5b2236" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>AddRequestLobbyListStringFilter</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1afd907a2a3c408af8a5d3b8a06339e834" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>CreateLobby</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a87015dda273c34c87202dff03c2a1bcd" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>DeleteLobbyData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ac4a18fb7d4c3fe8a52262bf10819de00" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetFavoriteGame</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aa02cf3fc75c7956274a25a1b0b0b7842" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetFavoriteGameCount</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ab05ea7bfbb66e71f9c8168bd59658139" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyByIndex</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ab32cf5b623bf344150ec5b9de347df44" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyChatEntry</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a82f793c9528365bf292eae23fdd74ef2" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a6a7d5098bed787ac881dbd6f949d457f" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyDataByIndex</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aab8d50df58d63682540291bb3968ae36" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyDataCount</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a3222459e3c037fa4cf5161abc7395734" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyGameServer</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a99b501994dbc20cd8b779b3382cfab4d" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyMemberByIndex</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a56776d5b567f4986be8a600088f63471" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyMemberData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a699801e8459c24d403c0fd7c377fc19d" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyMemberLimit</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ae654e81cb3e5dc55531f5b8b4aa1e8da" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetLobbyOwner</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a52b4cf5d1dc5e98dace30e617a1459a7" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>GetNumLobbyMembers</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1adb99cb6ab141daeb8f0395b75c0eef54" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>InviteUserToLobby</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a58d664c2f28d9f6b462bbde2a119d4af" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>JoinLobby</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aed931c21f4edd76ab9fb05b7a6baa0a7" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>LeaveLobby</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a5a3822c24bd141453c87312f169a71ac" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>RemoveFavoriteGame</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ac27e6fdc1b5cd77c6b189c6e884bac3a" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>RequestLobbyData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aadaad43efda0db2cd63c5e28bac2e872" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>RequestLobbyList</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aa1ccc3e4335e03d9e1178d932947f7eb" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SendLobbyChatMsg</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a0d2beda14bc9ec26157b83a9a1f9fb6b" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLinkedLobby</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a27dcc95de333635de0edf6fbf8b1b6b8" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aa9cefe0ae9aae79656550bf8fbe9fdcc" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyGameServer</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a3aa13ac77cf657591f3b41ba0f80cd99" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyJoinable</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a80ea0d00def5a62239fa5cf926554d89" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyMemberData</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1aa3e714fe5cf4901a871eb0f0ce146546" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyMemberLimit</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1a4886997c27a182a375703342df3f7d7a" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyOwner</name></member>
      <member refid="class_steamworks_1_1_steam_matchmaking_1ac800bd4da5a7aea1cf9764438a5e1eb6" prot="public" virt="non-virtual"><scope>Steamworks::SteamMatchmaking</scope><name>SetLobbyType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
