<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag" kind="class" prot="public">
    <compoundname>Expansions::Missions::Tests::TestPlantFlag</compoundname>
    <basecompoundref refid="class_expansions_1_1_missions_1_1_test_module" prot="public" virt="non-virtual">Expansions.Missions.TestModule</basecompoundref>
    <basecompoundref refid="interface_expansions_1_1_missions_1_1_i_scoreable_objective" prot="public" virt="non-virtual">Expansions.Missions.IScoreableObjective</basecompoundref>
    <basecompoundref refid="interface_expansions_1_1_missions_1_1_i_node_waypoint" prot="public" virt="non-virtual">Expansions.Missions.INodeWaypoint</basecompoundref>
    <basecompoundref refid="interface_expansions_1_1_missions_1_1_i_test_node_label" prot="public" virt="non-virtual">Expansions.Missions.ITestNodeLabel</basecompoundref>
    <basecompoundref refid="interface_expansions_1_1_missions_1_1_i_node_body" prot="public" virt="non-virtual">Expansions.Missions.INodeBody</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1af7be1a9ceeea17a2bb7e41d4aa0a1c89" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Expansions.Missions.Tests.TestPlantFlag.eventFound</definition>
        <argsstring></argsstring>
        <name>eventFound</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="21" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a787b2e53ff04b926dbfe74f37a8d7027" prot="private" static="no" mutable="no">
        <type><ref refid="class_expansions_1_1_missions_1_1_param_choices___celestial_body_surface" kindref="compound">ParamChoices_CelestialBodySurface</ref></type>
        <definition>ParamChoices_CelestialBodySurface Expansions.Missions.Tests.TestPlantFlag.situation</definition>
        <argsstring></argsstring>
        <name>situation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="19" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ace9cb038c083cc2e11b588f19deafb42" prot="private" static="no" mutable="no">
        <type><ref refid="class_vessel" kindref="compound">Vessel</ref></type>
        <definition>Vessel Expansions.Missions.Tests.TestPlantFlag.v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="22" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1abfd1f277ac806df59dee05887f0de9e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Expansions.Missions.Tests.TestPlantFlag.Awake</definition>
        <argsstring>()</argsstring>
        <name>Awake</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a7f1496357d23c9b1ba94259edf92d374">Awake</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="28" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="28" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a8191aba92959edf80f4f5242f295bde5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Expansions.Missions.Tests.TestPlantFlag.Cleared</definition>
        <argsstring>()</argsstring>
        <name>Cleared</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a215e4dc2e23a0cb3d44d668a9cfbd0fb">Cleared</reimplements>
        <briefdescription>
<para>Method to overide if you want to do stuff when a node is deactivated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="51" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a15d42a1cf18042ef5f9674329238c45d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Expansions.Missions.Tests.TestPlantFlag.GetExtraText</definition>
        <argsstring>()</argsstring>
        <name>GetExtraText</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_test_node_label_1af2ff7fe5163181636c240d0ca057db83">GetExtraText</reimplements>
        <briefdescription>
<para>Get extra text to be appended at the end of the node label caption. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Text to be appended at the end of the node label caption.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="177" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a7c85422403d588f41d988c6289427143" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override string</type>
        <definition>override string Expansions.Missions.Tests.TestPlantFlag.GetInfo</definition>
        <argsstring>()</argsstring>
        <name>GetInfo</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1ac9856f62e6e0291f7b1beb245f37c381">GetInfo</reimplements>
        <briefdescription>
<para>Get the information to be displayed about the module in the tooltip. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Information to be displayed about the module in the tooltip</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="190" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a6ad772032242c25851efd6f9dfc5c682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_celestial_body" kindref="compound">CelestialBody</ref></type>
        <definition>CelestialBody Expansions.Missions.Tests.TestPlantFlag.GetNodeBody</definition>
        <argsstring>()</argsstring>
        <name>GetNodeBody</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_node_body_1af997398357e77991f7219f4acda59b8a">GetNodeBody</reimplements>
        <briefdescription>
<para>Get the <ref refid="class_celestial_body" kindref="compound">CelestialBody</ref> associated with this node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_celestial_body" kindref="compound">CelestialBody</ref> or Null</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="140" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a246c9e622601b3b9c331bcaaa2991d3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_fine_print_1_1_waypoint" kindref="compound">Waypoint</ref></type>
        <definition>Waypoint Expansions.Missions.Tests.TestPlantFlag.GetNodeWaypoint</definition>
        <argsstring>()</argsstring>
        <name>GetNodeWaypoint</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_node_waypoint_1ac50f8fedd40e37c9696356a5875e7e6f">GetNodeWaypoint</reimplements>
        <briefdescription>
<para>Get the waypoint marker to show the location of the current test module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Waypoint marker representing the current test module.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="126" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="126" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ae6f6ccdd3356c3ceb3d7d4cc63485370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>object</type>
        <definition>object Expansions.Missions.Tests.TestPlantFlag.GetScoreModifier</definition>
        <argsstring>(Type scoreModule)</argsstring>
        <name>GetScoreModifier</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_scoreable_objective_1a67bff384d6beb01d97ce2d33ae16e918">GetScoreModifier</reimplements>
        <param>
          <type>Type</type>
          <declname>scoreModule</declname>
        </param>
        <briefdescription>
<para>Gets the modifier value to be applied on a certain score module </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scoreModule</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="217" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="217" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a2774ec0d81dc83f1187bc94a20dce0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Vector3</type>
        <definition>Vector3 Expansions.Missions.Tests.TestPlantFlag.GetWorldPosition</definition>
        <argsstring>()</argsstring>
        <name>GetWorldPosition</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_test_node_label_1ac36f5a387f7c453382ed09a8111673db">GetWorldPosition</reimplements>
        <briefdescription>
<para>Get location where the marker for the node should be displayed in world. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Location of the node.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="168" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ac4dc8d3295cc22389c3164ce3cd6d59f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Expansions.Missions.Tests.TestPlantFlag.HasNodeBody</definition>
        <argsstring>()</argsstring>
        <name>HasNodeBody</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_node_body_1a03b0a95e80ac85b82da0130d4742fd4d">HasNodeBody</reimplements>
        <briefdescription>
<para>Does this Node have a <ref refid="class_celestial_body" kindref="compound">CelestialBody</ref> associated with it? </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True or False.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="135" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a6de99734f012c5b80c54260fabfa42a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Expansions.Missions.Tests.TestPlantFlag.HasNodeLabel</definition>
        <argsstring>()</argsstring>
        <name>HasNodeLabel</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_test_node_label_1ad1f7f26e2cd77d6daceb4d5061554add">HasNodeLabel</reimplements>
        <briefdescription>
<para>Should we create a node label for this object or not? </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if we should create a node label, false otherwise.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="149" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1aa52a81a72379ef47e6aa6be109beac6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Expansions.Missions.Tests.TestPlantFlag.HasNodeWaypoint</definition>
        <argsstring>()</argsstring>
        <name>HasNodeWaypoint</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_node_waypoint_1a05c2c466bc435a2a8dacf24875228f83">HasNodeWaypoint</reimplements>
        <briefdescription>
<para>Should we create a waypoint for this object or not? </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if we should create a waypoint, false otherwise.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="117" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1adb83fd53572ebaa46677b8759dd5a839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Expansions.Missions.Tests.TestPlantFlag.HasWorldPosition</definition>
        <argsstring>()</argsstring>
        <name>HasWorldPosition</name>
        <reimplements refid="interface_expansions_1_1_missions_1_1_i_test_node_label_1aa5a87b04758b1474079761ad22513ac3">HasWorldPosition</reimplements>
        <briefdescription>
<para>Does the label represent an actual world position? For example, biomes won&apos;t have a world position, but a point in space will. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the node has a world position, false otherwise.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="159" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a42ea75c9bb7a1f9f3074e795f3f4b94c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Expansions.Missions.Tests.TestPlantFlag.Initialized</definition>
        <argsstring>()</argsstring>
        <name>Initialized</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a6b2c4f5bce370e72c46076c3f76e4708">Initialized</reimplements>
        <briefdescription>
<para>Method to overide if you want to do stuff when a node is activated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="45" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ad7bde49284d6c539e18d46ce749d4329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Expansions.Missions.Tests.TestPlantFlag.Load</definition>
        <argsstring>(ConfigNode node)</argsstring>
        <name>Load</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a7ffc7f4ade1e5ad85bbe7cc6656e585a">Load</reimplements>
        <param>
          <type><ref refid="class_config_node" kindref="compound">ConfigNode</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="206" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a95167515e6c2d7db9828701efbb99006" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Expansions.Missions.Tests.TestPlantFlag.Save</definition>
        <argsstring>(ConfigNode node)</argsstring>
        <name>Save</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a5b1e67787ec4a8fb1cad9bb0dad819d3">Save</reimplements>
        <param>
          <type><ref refid="class_config_node" kindref="compound">ConfigNode</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="199" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1aea1dcf073c9f2e29a97ef9338561ff41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Expansions.Missions.Tests.TestPlantFlag.Test</definition>
        <argsstring>()</argsstring>
        <name>Test</name>
        <reimplements refid="class_expansions_1_1_missions_1_1_test_module_1a61bc15b9bf3d61452ba5b7357f62dcbe">Test</reimplements>
        <briefdescription>
<para>Test active vessel to see if there is a flag placed </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="61" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="61" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a47f4c83ff113a57d66ea6e536523b37b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Expansions.Missions.Tests.TestPlantFlag.AfterFlagPlanted</definition>
        <argsstring>(FlagSite flagSite)</argsstring>
        <name>AfterFlagPlanted</name>
        <param>
          <type><ref refid="class_flag_site" kindref="compound">FlagSite</ref></type>
          <declname>flagSite</declname>
        </param>
        <briefdescription>
<para>Flag planted event </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag vessel</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="70" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="70" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test for plant flag. This test when a plant flag event is triggered in the specified body name and (optional)biome. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="159755">
        <label>ITestNodeLabel</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_test_node_label"/>
      </node>
      <node id="159748">
        <label>TestModule</label>
        <link refid="class_expansions_1_1_missions_1_1_test_module"/>
        <childnode refid="159749" relation="public-inheritance">
        </childnode>
        <childnode refid="159750" relation="public-inheritance">
        </childnode>
        <childnode refid="159751" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159756">
        <label>INodeBody</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_node_body"/>
      </node>
      <node id="159754">
        <label>INodeWaypoint</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_node_waypoint"/>
      </node>
      <node id="159751">
        <label>ITestModule</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_test_module"/>
        <childnode refid="159750" relation="public-inheritance">
        </childnode>
        <childnode refid="159752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159749">
        <label>MonoBehaviour</label>
      </node>
      <node id="159750">
        <label>IConfigNode</label>
        <link refid="interface_i_config_node"/>
      </node>
      <node id="159752">
        <label>IMENodeDisplay</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_m_e_node_display"/>
      </node>
      <node id="159747">
        <label>Expansions.Missions.Tests.TestPlantFlag</label>
        <link refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag"/>
        <childnode refid="159748" relation="public-inheritance">
        </childnode>
        <childnode refid="159753" relation="public-inheritance">
        </childnode>
        <childnode refid="159754" relation="public-inheritance">
        </childnode>
        <childnode refid="159755" relation="public-inheritance">
        </childnode>
        <childnode refid="159756" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159753">
        <label>IScoreableObjective</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_scoreable_objective"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="159765">
        <label>ITestNodeLabel</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_test_node_label"/>
      </node>
      <node id="159758">
        <label>TestModule</label>
        <link refid="class_expansions_1_1_missions_1_1_test_module"/>
        <childnode refid="159759" relation="public-inheritance">
        </childnode>
        <childnode refid="159760" relation="public-inheritance">
        </childnode>
        <childnode refid="159761" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159766">
        <label>INodeBody</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_node_body"/>
      </node>
      <node id="159764">
        <label>INodeWaypoint</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_node_waypoint"/>
      </node>
      <node id="159761">
        <label>ITestModule</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_test_module"/>
        <childnode refid="159760" relation="public-inheritance">
        </childnode>
        <childnode refid="159762" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159759">
        <label>MonoBehaviour</label>
      </node>
      <node id="159760">
        <label>IConfigNode</label>
        <link refid="interface_i_config_node"/>
      </node>
      <node id="159762">
        <label>IMENodeDisplay</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_m_e_node_display"/>
      </node>
      <node id="159757">
        <label>Expansions.Missions.Tests.TestPlantFlag</label>
        <link refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag"/>
        <childnode refid="159758" relation="public-inheritance">
        </childnode>
        <childnode refid="159763" relation="public-inheritance">
        </childnode>
        <childnode refid="159764" relation="public-inheritance">
        </childnode>
        <childnode refid="159765" relation="public-inheritance">
        </childnode>
        <childnode refid="159766" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159763">
        <label>IScoreableObjective</label>
        <link refid="interface_expansions_1_1_missions_1_1_i_scoreable_objective"/>
      </node>
    </collaborationgraph>
    <location file="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" line="15" column="1" bodyfile="D:/Workspace/KSP1/KSP/KSP/Assets/Expansions/Missions/Scripts/TestModules/TestPlantFlag.cs" bodystart="14" bodyend="237"/>
    <listofallmembers>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1ae2e61a18bc56351299ebc5460f36426a" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>AddParameterToNodeBody</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1ae063adc42bc3c589143fa9b30dd4cfd3" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>AddParameterToNodeBodyAndUpdateUI</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a5259628315b3dd282af2712f896984ac" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>AddParameterToSAP</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a47f4c83ff113a57d66ea6e536523b37b" prot="private" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>AfterFlagPlanted</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1abfd1f277ac806df59dee05887f0de9e7" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Awake</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a8191aba92959edf80f4f5242f295bde5" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Cleared</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1af32001d5d229884712ee65a627214b98" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>ClearTest</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1af7be1a9ceeea17a2bb7e41d4aa0a1c89" prot="private" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>eventFound</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a13bfdfbe840becfbe4be10cf9fc38744" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetAppObjectiveInfo</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1abf7e6050337e0403f88a6ee9c3904601" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetDisplayName</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a15d42a1cf18042ef5f9674329238c45d" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetExtraText</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a7c85422403d588f41d988c6289427143" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetInfo</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a97fd283b63605e89862d28c85b2e9616" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetInternalParametersToDisplay</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a6b068fd6d0b98b818d93634415ae3f84" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetName</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a8deb9f12f97077d6f137f04954724143" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetNode</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a6ad772032242c25851efd6f9dfc5c682" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetNodeBody</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a414a7de044d80aa7919fe5acf7a50f1e" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetNodeBodyParameterString</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a246c9e622601b3b9c331bcaaa2991d3f" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetNodeWaypoint</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ae6f6ccdd3356c3ceb3d7d4cc63485370" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetScoreModifier</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a2774ec0d81dc83f1187bc94a20dce0a6" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>GetWorldPosition</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ac4dc8d3295cc22389c3164ce3cd6d59f" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasNodeBody</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a51f5da19c3972eda679f192e633a0350" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasNodeBodyParameter</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a6de99734f012c5b80c54260fabfa42a4" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasNodeLabel</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1aa52a81a72379ef47e6aa6be109beac6e" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasNodeWaypoint</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1af4255332196c2b29f87f21313c55b100" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>hasOrbit</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1aeb591859f75c5ff550ba115ce4a555c3" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasSAPParameter</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a39c2c30034dc6e08feb163bdbf7dac57" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>hasWaypoint</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1adb83fd53572ebaa46677b8759dd5a839" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>HasWorldPosition</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1abf49c8278b9358e4df70c220e78074b8" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Initialize</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a42ea75c9bb7a1f9f3074e795f3f4b94c" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Initialized</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1af3ab1264a71c24f2a392554494a4022b" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>InitializeTest</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ad7bde49284d6c539e18d46ce749d4329" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Load</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1ad6b5da43b1abe6b5364b7713275f13ce" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>name</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a88ff7e10e5d29046f5a6126ad7647af7" prot="public" virt="non-virtual" ambiguityscope="Expansions::Missions::TestModule."><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>node</name></member>
      <member refid="interface_expansions_1_1_missions_1_1_i_test_node_label_1a76802628e7c078481107de080d91a154" prot="public" virt="non-virtual" ambiguityscope="Expansions::Missions::ITestNodeLabel."><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>node</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a51320fcfbfae8d373c0b1d0d02299766" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>OnDestroy</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a929a1bb741fb6cee3d59cfb928161674" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>OnPartPersistentIdChanged</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a9690904966d2473f65a84e80d11fac3c" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>OnVesselDocking</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a8978e0d5378360a1b0485ff2e8f60fa7" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>OnVesselPersistentIdChanged</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1af95c3e2a351e66ce544da6984f3232ea" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>OnVesselsUndocking</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a0273b4d9c9fe72b5ab24a0af031aee65" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>parametersDisplayedInSAP</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a5d3647d94cda37a60d291077f36f3513" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>ParameterSetupComplete</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1afdd91abcc27b33e6875df5003017feaf" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RemoveParameterFromNodeBody</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a0e773b20dd4a8ec0d4f9395992f9b201" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RemoveParameterFromNodeBodyAndUpdateUI</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a0d320fa7b142f54dfbe35d2c0e59b7be" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RemoveParameterFromSAP</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a32a4d4b9032553136fadc0cb2a52e2d6" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RunValidation</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a36ed25d2c2d3ee3722aa5406d00fdcb9" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RunValidationWrapper</name></member>
      <member refid="interface_expansions_1_1_missions_1_1_i_test_module_1aebda48f2bca7e359a5a7e4d4a0479342" prot="public" virt="non-virtual" ambiguityscope="Expansions::Missions::ITestModule."><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>RunValidationWrapper</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a95167515e6c2d7db9828701efbb99006" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Save</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a2c06dabd09bd7e53ef74fb0a01afd80d" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>ShouldCreateCheckpoint</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1a787b2e53ff04b926dbfe74f37a8d7027" prot="private" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>situation</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1aea1dcf073c9f2e29a97ef9338561ff41" prot="public" virt="virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>Test</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a28a394fe233cec31b8ba08b5c0b4cfbf" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>testGroup</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a895386143665bd2b8508251f44fd93b1" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>title</name></member>
      <member refid="class_expansions_1_1_missions_1_1_test_module_1a4731419a44659a592aa1f46fe4be563e" prot="public" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>UpdateNodeBodyUI</name></member>
      <member refid="class_expansions_1_1_missions_1_1_tests_1_1_test_plant_flag_1ace9cb038c083cc2e11b588f19deafb42" prot="private" virt="non-virtual"><scope>Expansions::Missions::Tests::TestPlantFlag</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
